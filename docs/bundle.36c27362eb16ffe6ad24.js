(()=>{"use strict";var e={56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var r={},o=[],s=0;s<e.length;s++){var c=e[s],d=a.base?c[0]+a.base:c[0],l=r[d]||0,u="".concat(d," ").concat(l);r[d]=l+1;var m=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)t[m].references++,t[m].updater(p);else{var h=i(p,a);a.byIndex=s,t.splice(s,0,{identifier:u,updater:h,references:1})}o.push(u)}return o}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var r=a(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var s=n(r[o]);t[s].references--}for(var c=a(e,i),d=0;d<r.length;d++){var l=n(r[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=c}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},233:(e,t,n)=>{n.d(t,{A:()=>s});var a=n(354),i=n.n(a),r=n(314),o=n.n(r)()(i());o.push([e.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./styles/style.css"],names:[],mappings:"AAAA;QACS,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]);const s=o},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);a&&o[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),t.push(l))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(i," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},659:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,i&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={id:a,exports:{}};return e[a](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var a=n(72),i=n.n(a),r=n(825),o=n.n(r),s=n(659),c=n.n(s),d=n(56),l=n.n(d),u=n(540),m=n.n(u),p=n(113),h=n.n(p),g=n(233),v={};v.styleTagTransform=h(),v.setAttributes=l(),v.insert=c().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=m(),i()(g.A,v),g.A&&g.A.locals&&g.A.locals;const f=class{constructor(){this.baseUrl="https://story-api.dicoding.dev/v1",this.token=localStorage.getItem("token")||null}setToken(e){this.token=e,e?localStorage.setItem("token",e):localStorage.removeItem("token")}getToken(){return this.token}async register(e,t,n){try{const a=await fetch(`${this.baseUrl}/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,email:t,password:n})}),i=await a.json();if(i.error)throw new Error(i.message);return i}catch(e){throw console.error("Error pendaftaran:",e),new Error("Gagal mendaftar. Silakan coba lagi nanti.")}}async login(e,t){try{const n=await fetch(`${this.baseUrl}/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:t})}),a=await n.json();if(a.error)throw new Error(a.message);return a.loginResult?.token&&(this.setToken(a.loginResult.token),localStorage.setItem("userId",a.loginResult.userId),localStorage.setItem("userName",a.loginResult.name)),a}catch(e){throw console.error("Error login:",e),new Error("Gagal login. Silakan coba lagi nanti.")}}logout(){this.setToken(null),localStorage.removeItem("userId"),localStorage.removeItem("userName")}async getAllStories(e=1,t=10,n=0){try{let a=`${this.baseUrl}/stories?page=${e}&size=${t}&location=${n}`,i={};this.token&&(i.Authorization=`Bearer ${this.token}`);const r=await fetch(a,{headers:i}),o=await r.json();if(o.error)throw new Error(o.message);return o.listStory||[]}catch(e){throw console.error("Error mengambil cerita:",e),new Error("Gagal memuat cerita. Silakan coba lagi nanti.")}}async getAllStories(e=1,t=30,n=1){const a=localStorage.getItem("token"),i=`https://story-api.dicoding.dev/v1/stories?page=${e}&size=${t}&location=${n}`;try{const e=await fetch(i,{headers:{Authorization:`Bearer ${a}`}}),t=await e.json();if("caches"in window){const t=await caches.open("dicoding-stories-cache");await t.put(i,e.clone())}return t.listStory}catch(e){if(console.warn("Gagal fetch dari network, coba ambil dari cache"),"caches"in window){const e=await caches.open("dicoding-stories-cache"),t=await e.match(i);if(t)return(await t.json()).listStory}throw new Error("Tidak bisa memuat data produk. Coba lagi nanti.")}}async addStory(e,t,n=null,a=null){try{if(!this.token)throw new Error("Autentikasi diperlukan untuk menambahkan cerita");const i=new FormData;i.append("description",e),i.append("photo",t),null!==n&&i.append("lat",n),null!==a&&i.append("lon",a);const r=await fetch(`${this.baseUrl}/stories`,{method:"POST",headers:{Authorization:`Bearer ${this.token}`},body:i}),o=await r.json();if(o.error)throw new Error(o.message);return o}catch(e){throw console.error("Error menambahkan cerita:",e),new Error("Gagal menambahkan cerita. Silakan coba lagi nanti.")}}async addStoryAsGuest(e,t,n=null,a=null){try{const i=new FormData;i.append("description",e),i.append("photo",t),null!==n&&i.append("lat",n),null!==a&&i.append("lon",a);const r=await fetch(`${this.baseUrl}/stories/guest`,{method:"POST",body:i}),o=await r.json();if(o.error)throw new Error(o.message);return o}catch(e){throw console.error("Error menambahkan cerita sebagai tamu:",e),new Error("Gagal menambahkan cerita. Silakan coba lagi nanti.")}}async registerServiceWorker(){if(!("serviceWorker"in navigator))throw new Error("Service worker tidak didukung oleh browser ini");try{const e=await navigator.serviceWorker.register("/sw.js");return console.log("Pendaftaran ServiceWorker berhasil:",e),e}catch(e){throw console.error("Pendaftaran ServiceWorker gagal:",e),e}}urlBase64ToUint8Array(e){const t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=window.atob(t),a=new Uint8Array(n.length);for(let e=0;e<n.length;++e)a[e]=n.charCodeAt(e);return a}async subscribeToPushNotifications(){try{if(!this.token)throw new Error("Autentikasi diperlukan untuk berlangganan notifikasi");const e=await navigator.serviceWorker.ready,t="BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk",n=await e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:this.urlBase64ToUint8Array(t)}),a=await fetch(`${this.baseUrl}/notifications/subscribe`,{method:"POST",headers:{Authorization:`Bearer ${this.token}`,"Content-Type":"application/json"},body:JSON.stringify(n)}),i=await a.json();if(i.error)throw new Error(i.message);return i}catch(e){throw console.error("Error berlangganan notifikasi push:",e),new Error("Gagal berlangganan notifikasi. Silakan coba lagi nanti.")}}async unsubscribeFromPushNotifications(){try{if(!this.token)throw new Error("Autentikasi diperlukan untuk berhenti berlangganan notifikasi");const e=await navigator.serviceWorker.ready,t=await e.pushManager.getSubscription();if(!t)return console.log("Tidak ada langganan untuk dibatalkan"),{error:!1,message:"Tidak ada langganan aktif"};await t.unsubscribe();const n=await fetch(`${this.baseUrl}/notifications/subscribe`,{method:"DELETE",headers:{Authorization:`Bearer ${this.token}`,"Content-Type":"application/json"},body:JSON.stringify({endpoint:t.endpoint})}),a=await n.json();if(a.error)throw new Error(a.message);return a}catch(e){throw console.error("Error berhenti berlangganan notifikasi push:",e),new Error("Gagal berhenti berlangganan notifikasi. Silakan coba lagi nanti.")}}},y=class{constructor({view:e,apiService:t}){this._view=e,this._apiService=t}async login(e,t){try{this._view.showLoading(),await this._apiService.login(e,t),this._view.onLoginSuccess()}catch(e){this._view.showError(e.message)}finally{this._view.hideLoading()}}},b=class{constructor({view:e,apiService:t}){this._view=e,this._apiService=t}async getAllProducts(){try{this._view.showLoading();const e=await this._apiService.getAllStories(1,30,1);e&&0!==e.length?this._view.showProducts(e):this._view.showProductsEmpty()}catch(e){this._view.showError(e.message)}finally{this._view.hideLoading()}}async getProductDetail(e){try{this._view.showLoading();const t=await this._apiService.getStoryDetail(e);t?this._view.showProductDetail(t):this._view.showError("Cerita tidak ditemukan")}catch(e){this._view.showError(e.message)}finally{this._view.hideLoading()}}async addProduct(e){try{this._view.showLoading();const{description:t,photo:n,lat:a,lon:i}=e,r=await this._apiService.addStory(t,n,a,i);return this._view.showSuccess("Produk berhasil ditambahkan!"),r}catch(e){throw this._view.showError(e.message),e}finally{this._view.hideLoading()}}submitAddProductForm({form:e,description:t,photo:n,lat:a,lon:i}){if(!(t&&n&&a&&i))return void this._view.showError("Harap lengkapi semua field yang diperlukan.");const r={description:t,photo:n,lat:a,lon:i};this.addProduct(r).then((()=>{e.reset(),this._view.resetFormUI(),setTimeout((()=>{window.location.hash="#/products"}),1500)})).catch((e=>{console.error("Gagal menambahkan produk:",e)}))}},w=(e,t)=>t.some((t=>e instanceof t));let k,E;const S=new WeakMap,B=new WeakMap,I=new WeakMap;let T={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return S.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return P(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function x(e){T=e(T)}function A(e){return"function"==typeof e?(t=e,(E||(E=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(M(this),e),P(this.request)}:function(...e){return P(t.apply(M(this),e))}):(e instanceof IDBTransaction&&function(e){if(S.has(e))return;const t=new Promise(((t,n)=>{const a=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",r),e.removeEventListener("abort",r)},i=()=>{t(),a()},r=()=>{n(e.error||new DOMException("AbortError","AbortError")),a()};e.addEventListener("complete",i),e.addEventListener("error",r),e.addEventListener("abort",r)}));S.set(e,t)}(e),w(e,k||(k=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,T):e);var t}function P(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const a=()=>{e.removeEventListener("success",i),e.removeEventListener("error",r)},i=()=>{t(P(e.result)),a()},r=()=>{n(e.error),a()};e.addEventListener("success",i),e.addEventListener("error",r)}));return I.set(t,e),t}(e);if(B.has(e))return B.get(e);const t=A(e);return t!==e&&(B.set(e,t),I.set(t,e)),t}const M=e=>I.get(e),C=["get","getKey","getAll","getAllKeys","count"],D=["put","add","delete","clear"],$=new Map;function j(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if($.get(t))return $.get(t);const n=t.replace(/FromIndex$/,""),a=t!==n,i=D.includes(n);if(!(n in(a?IDBIndex:IDBObjectStore).prototype)||!i&&!C.includes(n))return;const r=async function(e,...t){const r=this.transaction(e,i?"readwrite":"readonly");let o=r.store;return a&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),i&&r.done]))[0]};return $.set(t,r),r}x((e=>({...e,get:(t,n,a)=>j(t,n)||e.get(t,n,a),has:(t,n)=>!!j(t,n)||e.has(t,n)})));const _=["continue","continuePrimaryKey","advance"],H={},F=new WeakMap,N=new WeakMap,U={get(e,t){if(!_.includes(t))return e[t];let n=H[t];return n||(n=H[t]=function(...e){F.set(this,N.get(this)[t](...e))}),n}};async function*O(...e){let t=this;if(t instanceof IDBCursor||(t=await t.openCursor(...e)),!t)return;const n=new Proxy(t,U);for(N.set(n,t),I.set(n,M(t));t;)yield n,t=await(F.get(n)||t.continue()),F.delete(n)}function V(e,t){return t===Symbol.asyncIterator&&w(e,[IDBIndex,IDBObjectStore,IDBCursor])||"iterate"===t&&w(e,[IDBIndex,IDBObjectStore])}x((e=>({...e,get:(t,n,a)=>V(t,n)?O:e.get(t,n,a),has:(t,n)=>V(t,n)||e.has(t,n)})));const W="products",q=function(e,t,{blocked:n,upgrade:a,blocking:i,terminated:r}={}){const o=indexedDB.open(e,t),s=P(o);return a&&o.addEventListener("upgradeneeded",(e=>{a(P(o.result),e.oldVersion,e.newVersion,P(o.transaction),e)})),n&&o.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),s.then((e=>{r&&e.addEventListener("close",(()=>r())),i&&e.addEventListener("versionchange",(e=>i(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),s}("aisyshop-db",1,{upgrade(e){e.objectStoreNames.contains(W)||e.createObjectStore(W,{keyPath:"id"})}}),R={putProduct:async e=>(await q).put(W,e),getProductById:async e=>(await q).get(W,e),getAllProducts:async()=>(await q).getAll(W),removeProduct:async e=>(await q).delete(W,e)},G=class{constructor(){this.element=null}render(){this.element=document.createElement("div"),this.element.classList.add("page-transition"),this.element.innerHTML='\n        <section class="not-found-container" role="alert">\n          <div class="not-found-content">\n            <i class="fas fa-exclamation-triangle fa-4x"></i>\n            <h1>Halaman Tidak Ditemukan</h1>\n            <p>Maaf, halaman yang Anda cari tidak tersedia.</p>\n            <a href="#/" class="btn">Kembali ke Beranda</a>\n          </div>\n        </section>\n      ';const e=document.createElement("style");return e.textContent="\n        .not-found-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          min-height: 60vh;\n        }\n        \n        .not-found-content {\n          text-align: center;\n          padding: 3rem;\n          background-color: white;\n          border-radius: 8px;\n          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n          max-width: 500px;\n        }\n        \n        .not-found-content i {\n          color: var(--warning-color);\n          margin-bottom: 1rem;\n        }\n        \n        .not-found-content h1 {\n          margin-bottom: 1rem;\n          color: var(--dark-color);\n        }\n        \n        .not-found-content p {\n          margin-bottom: 1.5rem;\n          color: #666;\n        }\n      ",document.head.appendChild(e),this.element}afterRender(){}};function z(e){const t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=window.atob(t);return Uint8Array.from([...n].map((e=>e.charCodeAt(0))))}async function K(){try{if(!await async function(){return"Notification"in window?"granted"===Notification.permission||"denied"!==Notification.permission&&"granted"===await Notification.requestPermission():(console.log("Browser tidak mendukung notifikasi"),!1)}())return void console.log("Permission notifikasi ditolak");const e=await navigator.serviceWorker.ready;if(await e.pushManager.getSubscription())return void console.log("Already subscribed to push notifications");const t=await e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:z("BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk")}),n=localStorage.getItem("token");if(!n)return;const a={endpoint:t.endpoint,keys:{p256dh:btoa(String.fromCharCode(...new Uint8Array(t.getKey("p256dh")))),auth:btoa(String.fromCharCode(...new Uint8Array(t.getKey("auth"))))}},i=await fetch("https://story-api.dicoding.dev/v1/notifications/subscribe",{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify(a)}),r=await i.json();!1===r.error?(console.log("Successfully subscribed to push notifications:",r),"granted"===Notification.permission&&new Notification("Push Notification Aktif!",{body:"Anda akan menerima notifikasi untuk story baru",icon:"/icon-192x192.png"})):console.error("Failed to subscribe:",r)}catch(e){console.error("Gagal subscribe push:",e)}}const J={"/":class{constructor(){this.element=null}render(){this.element=document.createElement("div"),this.element.classList.add("page-transition"),this.element.innerHTML='\n        <section class="hero" role="region" aria-labelledby="home-title">\n          <h1 id="home-title">Selamat Datang di AisyShop</h1>\n          <p>Belanja online jadi lebih menyenangkan dengan AisyShop! Dapatkan produk berkualitas premium dari ribuan partner terpercaya kami dengan harga yang bersaing. Nikmati promo spesial setiap hari, pengiriman super cepat ke seluruh Indonesia, dan jaminan uang kembali 100%. AisyShop hadir sebagai solusi kebutuhan gaya hidup modern Anda - dari fashion, elektronik, hingga kebutuhan rumah tangga, semua ada dalam satu platform!.</p>\n          <a href="#/products" class="btn">Mulai Belanja Sekarang</a>\n        </section>\n        \n        <section class="featured-section" role="region" aria-labelledby="featured-title">\n          <h2 id="featured-title">Mengapa Memilih Kami</h2>\n          <div class="featured-content">\n            <p>AisyShop memberikan pengalaman berbelanja online terbaik dengan berbagai keunggulan, antara lain:</p>\n            <div class="features">\n              <div class="feature">\n                <i class="fas fa-truck fa-2x"></i>\n                <h3>Pengiriman Cepat</h3>\n                <p>Produk dikirim langsung ke alamat Anda dengan cepat dan aman.</p>\n              </div>\n              \n              <div class="feature">\n                <i class="fas fa-shield-alt fa-2x"></i>\n                <h3>Pembayaran Aman</h3>\n                <p>Transaksi Anda dijamin aman dengan sistem pembayaran terpercaya.</p>\n              </div>\n              \n              <div class="feature">\n                <i class="fas fa-headset fa-2x"></i>\n                <h3>Layanan Pelanggan 24/7</h3>\n                <p>Tim kami siap membantu Anda kapan saja.</p>\n              </div>\n            </div>\n          </div>\n        </section>\n      ';const e=document.createElement("style");return e.textContent="\n\n        .featured-section h2 {\n          text-align: center;\n        }\n\n        .featured-content {\n          margin-top: 2rem;\n          text-align: center;\n        }\n        \n        .features {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n          gap: 2rem;\n          margin-top: 2rem;\n        }\n        \n        .feature {\n          background-color: white;\n          padding: 2rem;\n          border-radius: 8px;\n          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n          text-align: center;\n        }\n        \n        .feature i {\n          color: var(--primary-color);\n          margin-bottom: 1rem;\n        }\n        \n        .feature h3 {\n          margin-bottom: 1rem;\n          color: var(--secondary-color);\n        }\n\n        @media (max-width: 768px) {\n          .features {\n            grid-template-columns: 1fr;\n          }\n        }\n      ",document.head.appendChild(e),this.element}afterRender(){}},"/products":class{constructor(){this.element=null,this.apiService=new f,this.presenter=new b({view:this,apiService:this.apiService}),this.map=null,this.markers=[]}render(){return this.element=document.createElement("div"),this.element.classList.add("page-transition"),this.element.innerHTML='\n      <section role="region" aria-labelledby="products-title">\n        <h2 id="products-title">Produk</h2>\n        <div id="loading" class="loading"><div class="loading-spinner"></div></div>\n        <div id="error-container"></div>\n        <div id="products-container" class="products-container"></div>\n        <div class="map-container"><h2>Lokasi Produk</h2><div id="map"></div></div>\n      </section>\n    ',this.element}afterRender(){this.initMap(),this.presenter.getAllProducts()}initMap(){this.map=L.map("map").setView([-2.5,118],4),L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"&copy; OpenStreetMap contributors"}).addTo(this.map)}showLoading(){document.getElementById("loading").style.display="flex"}hideLoading(){document.getElementById("loading").style.display="none"}showError(e){document.getElementById("error-container").innerHTML=`<div class="error-message"><p>${e}</p></div>`}async showProducts(e){const t=document.getElementById("products-container");t.innerHTML="",this.clearMarkers();for(const n of e){const e=document.createElement("div");e.classList.add("product-card");const a=new Date(n.createdAt).toLocaleDateString("id-ID"),i=await R.getProductById(n.id);e.innerHTML=`\n        <img src="${n.photoUrl}" class="product-image" alt="${n.description}">\n        <div class="product-info">\n          <h3 class="product-title">${n.name}</h3>\n          <p class="product-description">${n.description}</p>\n          <p class="product-location">\n            <i class="fas fa-map-marker-alt"></i> ${n.lat??"-"}, ${n.lon??"-"}\n          </p>\n          <p><small>Diposting: ${a}</small></p>\n          <div class="product-actions">\n            <button class="btn-save" id="save-btn-${n.id}">\n              ${i?"💖 Hapus dari Favorit":"🤍 Simpan ke Favorit"}\n            </button>\n          </div>\n        </div>\n      `,t.appendChild(e),document.getElementById(`save-btn-${n.id}`).addEventListener("click",(async()=>{await R.getProductById(n.id)?(await R.removeProduct(n.id),alert("Produk dihapus dari favorit.")):(await R.putProduct(n),alert("Produk disimpan ke favorit!")),this.presenter.getAllProducts()})),n.lat&&n.lon&&this.addMarker(n)}if(this.markers.length){const e=L.featureGroup(this.markers);this.map.fitBounds(e.getBounds(),{padding:[50,50]})}}showProductsEmpty(){document.getElementById("products-container").innerHTML='\n      <div class="empty-state">\n        <i class="fas fa-box-open fa-3x"></i>\n        <h2>Tidak ada produk</h2>\n        <p>Belum ada produk tersedia saat ini.</p>\n        <a href="#/add" class="btn">Tambah Produk</a>\n      </div>\n    '}addMarker(e){const t=L.marker([e.lat,e.lon]);t.bindPopup(`\n      <div class="popup-content">\n        <img src="${e.photoUrl}" alt="${e.description}" style="width:100%;max-height:150px;object-fit:cover;">\n        <h3>${e.name}</h3>\n        <p>${e.description}</p>\n      </div>\n    `),t.addTo(this.map),this.markers.push(t)}clearMarkers(){this.markers.forEach((e=>this.map.removeLayer(e))),this.markers=[]}},"/add":class{constructor(){this.element=null,this.apiService=new f,this.presenter=new b({view:this,apiService:this.apiService}),this.map=null,this.marker=null,this.latitude=null,this.longitude=null,this.photoBlob=null,this.mediaStream=null}render(){return this.element=document.createElement("div"),this.element.classList.add("page-transition"),this.element.innerHTML='\n      <section role="region" aria-labelledby="add-product-title">\n        <h2 id="add-product-title">Tambah Produk Baru</h2>\n        \n        <div id="loading" class="loading" style="display: none;">\n          <div class="loading-spinner"></div>\n        </div>\n        \n        <div id="message-container"></div>\n        \n        <div class="form-container">\n          <form id="addProductForm">\n            <div class="form-group">\n              <label for="nama">Nama Produk </label>\n              <input type="text" id="nama" name="nama" rows="4" required></input>\n            </div>\n\n            <div class="form-group">\n              <label for="description">Deskripsi Produk </label>\n              <textarea id="description" name="description" rows="4" required></textarea>\n            </div>\n            \n            <div class="form-group">\n              <label>Foto Produk </label>\n              <div class="camera-container">\n                <video id="videoElement" autoplay></video>\n                <img id="capturedImage" alt="Foto produk yang diambil">\n                <div class="camera-buttons">\n                  <button type="button" id="startCameraBtn" class="btn">\n                    <i class="fas fa-camera"></i> Buka Kamera\n                  </button>\n                  <button type="button" id="captureBtn" class="btn" disabled>\n                    <i class="fas fa-camera-retro"></i> Ambil Foto\n                  </button>\n                  <button type="button" id="retakeBtn" class="btn" style="display: none;">\n                    <i class="fas fa-redo"></i> Ambil Ulang\n                  </button>\n                </div>\n              </div>\n            </div>\n            \n            <div class="form-group">\n              <label>Lokasi Produk </label>\n              <p>Klik pada peta untuk menentukan lokasi produk</p>\n              <div class="location-map-container">\n                <div id="locationMap"></div>\n              </div>\n              <div id="coordinates-display" class="coordinates-display">\n                Belum ada lokasi yang dipilih\n              </div>\n            </div>\n            \n            <button type="submit" id="submitBtn" class="btn" disabled>\n              <i class="fas fa-plus-circle"></i> Tambah Produk\n            </button>\n          </form>\n        </div>\n      </section>\n    ',this.element}afterRender(){this.initMap(),this.initCameraButtons(),this.initFormSubmission(),window.addEventListener("hashchange",(()=>this.stopCameraStream())),window.addEventListener("beforeunload",(()=>this.stopCameraStream()))}initMap(){this.map=L.map("locationMap").setView([-6.2088,106.8456],10),L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"&copy; OpenStreetMap contributors"}).addTo(this.map),this.map.on("click",(e=>{this.setLocation(e.latlng.lat,e.latlng.lng)}))}setLocation(e,t){this.latitude=e,this.longitude=t,document.getElementById("coordinates-display").innerHTML=`\n      Lokasi dipilih: ${e.toFixed(6)}, ${t.toFixed(6)}\n    `,this.marker&&this.map.removeLayer(this.marker),this.marker=L.marker([e,t]).addTo(this.map),this.checkFormValidity()}initCameraButtons(){const e=document.getElementById("startCameraBtn"),t=document.getElementById("captureBtn"),n=document.getElementById("retakeBtn"),a=document.getElementById("videoElement"),i=document.getElementById("capturedImage");e.addEventListener("click",(async()=>{try{this.mediaStream=await navigator.mediaDevices.getUserMedia({video:!0}),a.srcObject=this.mediaStream,a.style.display="block",t.disabled=!1,e.disabled=!0}catch(e){console.error("Error accessing camera:",e),this.showError("Tidak dapat mengakses kamera. Pastikan Anda memberikan izin dan kamera tersedia.")}})),t.addEventListener("click",(()=>{const e=document.createElement("canvas"),r=e.getContext("2d");e.width=a.videoWidth,e.height=a.videoHeight,r.drawImage(a,0,0,e.width,e.height),e.toBlob((e=>{this.photoBlob=e,i.src=URL.createObjectURL(e),i.style.display="block",this.stopCameraStream(),a.style.display="none",t.style.display="none",n.style.display="inline-block",this.checkFormValidity()}),"image/jpeg",.8)})),n.addEventListener("click",(()=>{i.style.display="none",i.src="",this.photoBlob=null,e.disabled=!1,t.style.display="inline-block",n.style.display="none",this.checkFormValidity()}))}stopCameraStream(){this.mediaStream&&(this.mediaStream.getTracks().forEach((e=>e.stop())),this.mediaStream=null)}initFormSubmission(){const e=document.getElementById("addProductForm"),t=document.getElementById("description");t.addEventListener("input",(()=>{this.checkFormValidity()})),e.addEventListener("submit",(n=>{n.preventDefault(),this.presenter.submitAddProductForm({form:e,description:t.value,photo:this.photoBlob,lat:this.latitude,lon:this.longitude})}))}isFormValid(){return document.getElementById("description").value&&this.photoBlob&&this.latitude&&this.longitude}checkFormValidity(){document.getElementById("submitBtn").disabled=!this.isFormValid()}showLoading(){document.getElementById("loading").style.display="flex"}hideLoading(){document.getElementById("loading").style.display="none"}showError(e){const t=document.getElementById("message-container");t.innerHTML=`\n      <div class="error-message">\n        <p>${e}</p>\n      </div>\n    `,setTimeout((()=>{t.innerHTML=""}),5e3)}showSuccess(e){const t=document.getElementById("message-container");t.innerHTML=`\n      <div class="success-message">\n        <p>${e}</p>\n      </div>\n    `,setTimeout((()=>{t.innerHTML=""}),5e3)}resetFormUI(){document.getElementById("capturedImage").style.display="none",document.getElementById("capturedImage").src="",document.getElementById("retakeBtn").style.display="none",document.getElementById("startCameraBtn").disabled=!1,document.getElementById("captureBtn").style.display="inline-block",this.photoBlob=null,this.marker&&(this.map.removeLayer(this.marker),this.marker=null),this.latitude=null,this.longitude=null,document.getElementById("coordinates-display").innerHTML="Belum ada lokasi yang dipilih"}},"/favorite":class{constructor(){this.element=null}render(){return this.element=document.createElement("div"),this.element.classList.add("page-transition"),this.element.innerHTML='\n      <section role="region" aria-labelledby="favorites-title">\n        <h2 id="favorites-title" class="section-title">Produk Favorit Saya</h2>\n        <div id="loading" class="loading"><div class="loading-spinner"></div></div>\n        <div id="error-container"></div>\n        <div id="favorite-products-container" class="products-container"></div>\n      </section>\n    ',this.element}async afterRender(){try{this.showLoading();const e=document.getElementById("favorite-products-container");if(document.getElementById("error-container").innerHTML="",!R)throw new Error("Database tidak tersedia");const t=await R.getAllProducts();if(this.hideLoading(),!t||0===t.length)return void(e.innerHTML='\n          <div class="empty-state">\n            <i class="fas fa-heart-broken fa-3x"></i>\n            <h2>Belum ada produk favorit</h2>\n            <p>Simpan produk terlebih dahulu untuk muncul di sini.</p>\n            <a href="#/products" class="btn">Lihat Produk</a>\n          </div>\n        ');e.innerHTML="",t.forEach((t=>{const n=new Date(t.createdAt).toLocaleDateString("id-ID"),a=document.createElement("div");a.classList.add("product-card"),a.innerHTML=`\n          <img src="${t.photoUrl}" class="product-image" alt="${t.description}" loading="lazy">\n          <div class="product-info">\n            <h3 class="product-title">${t.name}</h3>\n            <p class="product-description">${t.description}</p>\n            <p class="product-location">\n              <i class="fas fa-map-marker-alt"></i> ${t.lat??"-"}, ${t.lon??"-"}\n            </p>\n            <p><small>Diposting: ${n}</small></p>\n            <div class="product-actions">\n              <button class="btn-remove" data-id="${t.id}">❌ Hapus dari Favorit</button>\n            </div>\n          </div>\n        `,e.appendChild(a)})),this.addEventListeners()}catch(e){this.hideLoading(),document.getElementById("error-container").innerHTML=`\n        <div class="error-message">\n          <i class="fas fa-exclamation-triangle"></i>\n          <p>Terjadi kesalahan saat memuat produk favorit: ${e.message}</p>\n          <button id="retry-button" class="btn">Coba Lagi</button>\n        </div>\n      `,document.getElementById("retry-button").addEventListener("click",(()=>{this.afterRender()})),console.error("Error loading favorite products:",e)}}addEventListeners(){document.querySelectorAll(".btn-remove").forEach((e=>{e.addEventListener("click",(async e=>{try{const t=e.target.dataset.id;if(!t)throw new Error("ID produk tidak valid");if(confirm("Apakah Anda yakin ingin menghapus produk ini dari favorit?")){e.target.innerHTML='<i class="fas fa-spinner fa-spin"></i> Menghapus...',e.target.disabled=!0,await R.removeProduct(t);const n=e.target.closest(".product-card");n.style.transition="opacity 0.5s",n.style.opacity="0",setTimeout((()=>{n.remove();const e=document.getElementById("favorite-products-container");e.children.length||(e.innerHTML='\n                  <div class="empty-state">\n                    <i class="fas fa-heart-broken fa-3x"></i>\n                    <h2>Belum ada produk favorit</h2>\n                    <p>Simpan produk terlebih dahulu untuk muncul di sini.</p>\n                    <a href="#/products" class="btn">Lihat Produk</a>\n                  </div>\n                '),this.showNotification("Produk berhasil dihapus dari favorit")}),500)}}catch(e){console.error("Error removing product:",e),this.showNotification("Gagal menghapus produk: "+e.message,"error")}}))}))}showNotification(e,t="success"){const n=document.querySelector(".notification");n&&n.remove();const a=document.createElement("div");a.className=`notification ${t}`,a.innerHTML=`\n      <div class="notification-content">\n        <i class="fas ${"success"===t?"fa-check-circle":"fa-exclamation-circle"}"></i>\n        <p>${e}</p>\n      </div>\n    `,document.body.appendChild(a),setTimeout((()=>{a.classList.add("show")}),10),setTimeout((()=>{a.classList.remove("show"),setTimeout((()=>{a.remove()}),300)}),3e3)}showLoading(){const e=document.getElementById("loading");e&&(e.style.display="flex")}hideLoading(){const e=document.getElementById("loading");e&&(e.style.display="none")}},"/login":class{constructor(){this.apiService=new f,this.presenter=new y({view:this,apiService:this.apiService})}render(){const e=document.createElement("div");return e.className="login-container",e.innerHTML='\n      <div class="login-wrapper">\n        <div class="login-header">\n          <i class="fas fa-store"></i>\n          <h1>AisyShop</h1>\n        </div>\n        <section class="form-container">\n          <form id="loginForm">\n            <div class="form-group">\n              <label for="email">Email</label>\n              <input type="email" id="email" required>\n            </div>\n            <div class="form-group">\n              <label for="password">Password</label>\n              <input type="password" id="password" required>\n            </div>\n            <button type="submit" class="btnlogin btn-primary">Login</button>\n          </form>\n        </section>\n      </div>\n    ',e}afterRender(){document.getElementById("loginForm").addEventListener("submit",(e=>{e.preventDefault();const t=document.getElementById("email").value,n=document.getElementById("password").value;this.presenter.login(t,n)}))}showLoading(){const e=document.querySelector('button[type="submit"]');e.disabled=!0,e.dataset.originalText=e.textContent,e.textContent="Loading..."}hideLoading(){const e=document.querySelector('button[type="submit"]');e.disabled=!1,e.textContent=e.dataset.originalText||"Login"}showError(e){alert(e)}onLoginSuccess(){alert("Login berhasil"),window.location.hash="#/"}}},Q=(new f,e=>{const t=document.querySelector("header"),n=document.querySelector("footer");t.style.display=e?"block":"none",n.style.display=e?"block":"none"}),Y=async()=>{const e=localStorage.getItem("token"),t=window.location.hash.slice(1)||"/",n="/login"===t;if(Q(!!e),!e&&!n)return void(window.location.hash="#/login");if(e&&n)return void(window.location.hash="#/");const a=J[t]||G,i=document.getElementById("mainContent");try{if(document.startViewTransition)document.startViewTransition((()=>{i.innerHTML="";const e=new a;i.appendChild(e.render()),e.afterRender()}));else{i.innerHTML="";const e=new a;i.appendChild(e.render()),e.afterRender()}e&&X(t)}catch(e){console.error("Error rendering page:",e),i.innerHTML=`<div class="error-message">Terjadi kesalahan saat memuat halaman: ${e.message}</div>`}},X=e=>{document.querySelectorAll(".nav-link").forEach((e=>e.classList.remove("active")));const t=document.getElementById({"/":"homeLink","/products":"productsLink","/add":"addLink","/favorite":"favoriteLink"}[e]);t&&t.classList.add("active")},Z=()=>{const e=document.querySelector("nav ul");if(e&&!document.getElementById("logoutLink")){const t=document.createElement("li"),n=document.createElement("a");n.href="#",n.id="logoutLink",n.className="nav-link",n.textContent="Logout",n.addEventListener("click",(e=>{e.preventDefault(),localStorage.removeItem("token"),window.location.hash="#/login"})),t.appendChild(n),e.appendChild(t)}},ee=document.getElementById("hamburgerMenu"),te=document.querySelector("nav");ee&&te&&(ee.addEventListener("click",(()=>{te.classList.toggle("active")})),document.addEventListener("click",(e=>{te.contains(e.target)||ee.contains(e.target)||te.classList.remove("active")}))),document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelector("#mainContent"),t=document.querySelector(".skip-link");t&&e&&t.addEventListener("click",(function(n){n.preventDefault(),t.blur(),e.setAttribute("tabindex","-1"),e.focus(),e.scrollIntoView({behavior:"smooth"})}))})),window.addEventListener("load",(async()=>{await async function(){if(!("serviceWorker"in navigator))return console.log("Service Worker tidak didukung browser"),null;try{const e=await navigator.serviceWorker.register("/sw.bundle.js");return console.log("Service Worker terdaftar!",e),await navigator.serviceWorker.ready,console.log("Service Worker ready!"),e}catch(e){return console.error("SW gagal:",e),null}}(),await Y(),localStorage.getItem("token")&&(Z(),setTimeout((async()=>{await K()}),1e3))})),window.addEventListener("hashchange",Y),window.addEventListener("storage",(e=>{"token"===e.key&&(Q(!!e.newValue),e.newValue&&(Z(),setTimeout((async()=>{await K()}),1e3)))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixJQUNULENBS0osQ0EySVErQixTQUNBa1IsSUFFUWxVLGFBQWFDLFFBQVEsV0FFakMwVSxJQUVBek8sWUFBVytELGdCQUNIZ0QsR0FBcUIsR0FDMUIsS0FDTCxJQUdGdlAsT0FBT29MLGlCQUFpQixhQUFjb0wsR0FHdEN4VyxPQUFPb0wsaUJBQWlCLFdBQVlpRCxJQUNoQixVQUFkQSxFQUFNOU0sTUFDUjZVLElBQWUvSCxFQUFNdkMsVUFDakJ1QyxFQUFNdkMsV0FDUm1MLElBQ0F6TyxZQUFXK0QsZ0JBQ0hnRCxHQUFxQixHQUMxQixNQUVQLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXN5c2hvcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9haXN5c2hvcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9haXN5c2hvcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2Fpc3lzaG9wLy4vc3R5bGVzL3N0eWxlLmNzcz83NDQ3Iiwid2VicGFjazovL2Fpc3lzaG9wLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9haXN5c2hvcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2Fpc3lzaG9wLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Fpc3lzaG9wLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9haXN5c2hvcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2Fpc3lzaG9wL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Fpc3lzaG9wL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2Fpc3lzaG9wL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9haXN5c2hvcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Fpc3lzaG9wL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9haXN5c2hvcC8uL3N0eWxlcy9zdHlsZS5jc3M/NDQ1ZSIsIndlYnBhY2s6Ly9haXN5c2hvcC8uL1NjcmlwdC9kYXRhL2FwaS1zZXJ2aWNlLmpzIiwid2VicGFjazovL2Fpc3lzaG9wLy4vU2NyaXB0L3ByZXNlbnRlci9hdXRoLXByZXNlbnRlci5qcyIsIndlYnBhY2s6Ly9haXN5c2hvcC8uL1NjcmlwdC9wcmVzZW50ZXIvcHJvZHVjdC1wcmVzZW50ZXIuanMiLCJ3ZWJwYWNrOi8vYWlzeXNob3AvLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovL2Fpc3lzaG9wLy4vU2NyaXB0L2RhdGEvZGF0YWJhc2UuanMiLCJ3ZWJwYWNrOi8vYWlzeXNob3AvLi9TY3JpcHQvY29tcG9uZW50cy9ub3QtZm91bmQtcGFnZS5qcyIsIndlYnBhY2s6Ly9haXN5c2hvcC8uL1NjcmlwdC9hcHAuanMiLCJ3ZWJwYWNrOi8vYWlzeXNob3AvLi9TY3JpcHQvY29tcG9uZW50cy9ob21lLXBhZ2UuanMiLCJ3ZWJwYWNrOi8vYWlzeXNob3AvLi9TY3JpcHQvY29tcG9uZW50cy9wcm9kdWN0cy1wYWdlLmpzIiwid2VicGFjazovL2Fpc3lzaG9wLy4vU2NyaXB0L2NvbXBvbmVudHMvYWRkLXByb2R1Y3QtcGFnZS5qcyIsIndlYnBhY2s6Ly9haXN5c2hvcC8uL1NjcmlwdC9jb21wb25lbnRzL2Zhdm9yaXRlLXByb2R1Y3RzLXBhZ2UuanMiLCJ3ZWJwYWNrOi8vYWlzeXNob3AvLi9TY3JpcHQvY29tcG9uZW50cy9sb2dpbi1wYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zdHlsZXMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO1FBQ1MsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXG5leHBvcnQge307XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY2xhc3MgQXBpU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5iYXNlVXJsID0gJ2h0dHBzOi8vc3RvcnktYXBpLmRpY29kaW5nLmRldi92MSc7XHJcbiAgICAgIHRoaXMudG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSB8fCBudWxsO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgLy8gPT09PT0gSGVscGVyIE1ldGhvZHMgPT09PT1cclxuICBcclxuICAgIHNldFRva2VuKHRva2VuKSB7XHJcbiAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcclxuICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgdG9rZW4pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICBnZXRUb2tlbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudG9rZW47XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvLyA9PT09PSBNYW5hamVtZW4gUGVuZ2d1bmEgPT09PT1cclxuICBcclxuICAgIGFzeW5jIHJlZ2lzdGVyKG5hbWUsIGVtYWlsLCBwYXNzd29yZCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9yZWdpc3RlcmAsIHtcclxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgZW1haWwsXHJcbiAgICAgICAgICAgIHBhc3N3b3JkLFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgfSk7XHJcbiAgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gIFxyXG4gICAgICAgIGlmIChyZXNwb25zZUpzb24uZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZUpzb24ubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIHJldHVybiByZXNwb25zZUpzb247XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcGVuZGFmdGFyYW46JywgZXJyb3IpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignR2FnYWwgbWVuZGFmdGFyLiBTaWxha2FuIGNvYmEgbGFnaSBuYW50aS4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgYXN5bmMgbG9naW4oZW1haWwsIHBhc3N3b3JkKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2xvZ2luYCwge1xyXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICBlbWFpbCxcclxuICAgICAgICAgICAgcGFzc3dvcmQsXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICB9KTtcclxuICBcclxuICAgICAgICBjb25zdCByZXNwb25zZUpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5lcnJvcikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlSnNvbi5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgLy8gU2ltcGFuIHRva2VuIHVudHVrIHBlcm1pbnRhYW4gc2VsYW5qdXRueWFcclxuICAgICAgICBpZiAocmVzcG9uc2VKc29uLmxvZ2luUmVzdWx0Py50b2tlbikge1xyXG4gICAgICAgICAgdGhpcy5zZXRUb2tlbihyZXNwb25zZUpzb24ubG9naW5SZXN1bHQudG9rZW4pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBTaW1wYW4ganVnYSB1c2VyIGRhdGEgamlrYSBkaXBlcmx1a2FuXHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcklkJywgcmVzcG9uc2VKc29uLmxvZ2luUmVzdWx0LnVzZXJJZCk7XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlck5hbWUnLCByZXNwb25zZUpzb24ubG9naW5SZXN1bHQubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIHJldHVybiByZXNwb25zZUpzb247XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9naW46JywgZXJyb3IpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignR2FnYWwgbG9naW4uIFNpbGFrYW4gY29iYSBsYWdpIG5hbnRpLicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICBsb2dvdXQoKSB7XHJcbiAgICAgIHRoaXMuc2V0VG9rZW4obnVsbCk7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1c2VySWQnKTtcclxuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXJOYW1lJyk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvLyA9PT09PSBNYW5hamVtZW4gQ2VyaXRhID09PT09XHJcbiAgXHJcbiAgICBhc3luYyBnZXRBbGxTdG9yaWVzKHBhZ2UgPSAxLCBzaXplID0gMTAsIGxvY2F0aW9uID0gMCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGxldCB1cmwgPSBgJHt0aGlzLmJhc2VVcmx9L3N0b3JpZXM/cGFnZT0ke3BhZ2V9JnNpemU9JHtzaXplfSZsb2NhdGlvbj0ke2xvY2F0aW9ufWA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7fTtcclxuICAgICAgICBpZiAodGhpcy50b2tlbikge1xyXG4gICAgICAgICAgaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gYEJlYXJlciAke3RoaXMudG9rZW59YDtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsgaGVhZGVycyB9KTtcclxuICAgICAgICBjb25zdCByZXNwb25zZUpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5lcnJvcikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlSnNvbi5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbi5saXN0U3RvcnkgfHwgW107XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbWVuZ2FtYmlsIGNlcml0YTonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHYWdhbCBtZW11YXQgY2VyaXRhLiBTaWxha2FuIGNvYmEgbGFnaSBuYW50aS4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgYXN5bmMgZ2V0QWxsU3RvcmllcyhwYWdlID0gMSwgc2l6ZSA9IDMwLCBsb2NhdGlvbiA9IDEpIHtcclxuICAgICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTsgLy8gcGFzdGlrYW4gdG9rZW4gYWRhXHJcbiAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL3N0b3J5LWFwaS5kaWNvZGluZy5kZXYvdjEvc3Rvcmllcz9wYWdlPSR7cGFnZX0mc2l6ZT0ke3NpemV9JmxvY2F0aW9uPSR7bG9jYXRpb259YDtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICAgICAgLy8g4pyFIFNpbXBhbiBtYW51YWwga2UgY2FjaGUgYWdhciBiaXNhIGRpYWtzZXMgb2ZmbGluZVxyXG4gICAgICAgIGlmICgnY2FjaGVzJyBpbiB3aW5kb3cpIHtcclxuICAgICAgICAgIGNvbnN0IGNhY2hlID0gYXdhaXQgY2FjaGVzLm9wZW4oJ2RpY29kaW5nLXN0b3JpZXMtY2FjaGUnKTtcclxuICAgICAgICAgIGF3YWl0IGNhY2hlLnB1dCh1cmwsIHJlc3BvbnNlLmNsb25lKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGpzb24ubGlzdFN0b3J5O1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignR2FnYWwgZmV0Y2ggZGFyaSBuZXR3b3JrLCBjb2JhIGFtYmlsIGRhcmkgY2FjaGUnKTtcclxuXHJcbiAgICAgICAgLy8g8J+UgSBBbWJpbCBkYXJpIGNhY2hlIGppa2Egb2ZmbGluZVxyXG4gICAgICAgIGlmICgnY2FjaGVzJyBpbiB3aW5kb3cpIHtcclxuICAgICAgICAgIGNvbnN0IGNhY2hlID0gYXdhaXQgY2FjaGVzLm9wZW4oJ2RpY29kaW5nLXN0b3JpZXMtY2FjaGUnKTtcclxuICAgICAgICAgIGNvbnN0IGNhY2hlZFJlc3BvbnNlID0gYXdhaXQgY2FjaGUubWF0Y2godXJsKTtcclxuICAgICAgICAgIGlmIChjYWNoZWRSZXNwb25zZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWRKc29uID0gYXdhaXQgY2FjaGVkUmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkSnNvbi5saXN0U3Rvcnk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RpZGFrIGJpc2EgbWVtdWF0IGRhdGEgcHJvZHVrLiBDb2JhIGxhZ2kgbmFudGkuJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgXHJcbiAgICBhc3luYyBhZGRTdG9yeShkZXNjcmlwdGlvbiwgcGhvdG8sIGxhdCA9IG51bGwsIGxvbiA9IG51bGwpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBpZiAoIXRoaXMudG9rZW4pIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXV0ZW50aWthc2kgZGlwZXJsdWthbiB1bnR1ayBtZW5hbWJhaGthbiBjZXJpdGEnKTtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgLy8gQnVhdCBGb3JtRGF0YSB1bnR1ayBwZXJtaW50YWFuIG11bHRpcGFydC9mb3JtLWRhdGFcclxuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZGVzY3JpcHRpb24nLCBkZXNjcmlwdGlvbik7XHJcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdwaG90bycsIHBob3RvKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBUYW1iYWhrYW4ga29vcmRpbmF0IGppa2EgdGVyc2VkaWFcclxuICAgICAgICBpZiAobGF0ICE9PSBudWxsKSBmb3JtRGF0YS5hcHBlbmQoJ2xhdCcsIGxhdCk7XHJcbiAgICAgICAgaWYgKGxvbiAhPT0gbnVsbCkgZm9ybURhdGEuYXBwZW5kKCdsb24nLCBsb24pO1xyXG4gIFxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9zdG9yaWVzYCwge1xyXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMudG9rZW59YFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGJvZHk6IGZvcm1EYXRhXHJcbiAgICAgICAgfSk7XHJcbiAgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gIFxyXG4gICAgICAgIGlmIChyZXNwb25zZUpzb24uZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZUpzb24ubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIHJldHVybiByZXNwb25zZUpzb247XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbWVuYW1iYWhrYW4gY2VyaXRhOicsIGVycm9yKTtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dhZ2FsIG1lbmFtYmFoa2FuIGNlcml0YS4gU2lsYWthbiBjb2JhIGxhZ2kgbmFudGkuJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICBcclxuICAgIGFzeW5jIGFkZFN0b3J5QXNHdWVzdChkZXNjcmlwdGlvbiwgcGhvdG8sIGxhdCA9IG51bGwsIGxvbiA9IG51bGwpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBCdWF0IEZvcm1EYXRhIHVudHVrIHBlcm1pbnRhYW4gbXVsdGlwYXJ0L2Zvcm0tZGF0YVxyXG4gICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdkZXNjcmlwdGlvbicsIGRlc2NyaXB0aW9uKTtcclxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ3Bob3RvJywgcGhvdG8pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFRhbWJhaGthbiBrb29yZGluYXQgamlrYSB0ZXJzZWRpYVxyXG4gICAgICAgIGlmIChsYXQgIT09IG51bGwpIGZvcm1EYXRhLmFwcGVuZCgnbGF0JywgbGF0KTtcclxuICAgICAgICBpZiAobG9uICE9PSBudWxsKSBmb3JtRGF0YS5hcHBlbmQoJ2xvbicsIGxvbik7XHJcbiAgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L3N0b3JpZXMvZ3Vlc3RgLCB7XHJcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgIGJvZHk6IGZvcm1EYXRhXHJcbiAgICAgICAgfSk7XHJcbiAgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gIFxyXG4gICAgICAgIGlmIChyZXNwb25zZUpzb24uZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZUpzb24ubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIHJldHVybiByZXNwb25zZUpzb247XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbWVuYW1iYWhrYW4gY2VyaXRhIHNlYmFnYWkgdGFtdTonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHYWdhbCBtZW5hbWJhaGthbiBjZXJpdGEuIFNpbGFrYW4gY29iYSBsYWdpIG5hbnRpLicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvLyA9PT09PSBQdXNoIE5vdGlmaWNhdGlvbiBNZXRob2RzID09PT09XHJcbiAgXHJcbiAgICAvLyBNZW5kYWZ0YXJrYW4gU2VydmljZSBXb3JrZXJcclxuICAgIGFzeW5jIHJlZ2lzdGVyU2VydmljZVdvcmtlcigpIHtcclxuICAgICAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgcmVnaXN0cmF0aW9uID0gYXdhaXQgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoJy9zdy5qcycpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1BlbmRhZnRhcmFuIFNlcnZpY2VXb3JrZXIgYmVyaGFzaWw6JywgcmVnaXN0cmF0aW9uKTtcclxuICAgICAgICAgIHJldHVybiByZWdpc3RyYXRpb247XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1BlbmRhZnRhcmFuIFNlcnZpY2VXb3JrZXIgZ2FnYWw6JywgZXJyb3IpO1xyXG4gICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VydmljZSB3b3JrZXIgdGlkYWsgZGlkdWt1bmcgb2xlaCBicm93c2VyIGluaScpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvLyBLb252ZXJzaSBCYXNlNjQga2UgVWludDhBcnJheSB1bnR1ayBWQVBJRCBrZXlcclxuICAgIHVybEJhc2U2NFRvVWludDhBcnJheShiYXNlNjRTdHJpbmcpIHtcclxuICAgICAgY29uc3QgcGFkZGluZyA9ICc9Jy5yZXBlYXQoKDQgLSBiYXNlNjRTdHJpbmcubGVuZ3RoICUgNCkgJSA0KTtcclxuICAgICAgY29uc3QgYmFzZTY0ID0gKGJhc2U2NFN0cmluZyArIHBhZGRpbmcpXHJcbiAgICAgICAgLnJlcGxhY2UoLy0vZywgJysnKVxyXG4gICAgICAgIC5yZXBsYWNlKC9fL2csICcvJyk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByYXdEYXRhID0gd2luZG93LmF0b2IoYmFzZTY0KTtcclxuICAgICAgY29uc3Qgb3V0cHV0QXJyYXkgPSBuZXcgVWludDhBcnJheShyYXdEYXRhLmxlbmd0aCk7XHJcbiAgICAgIFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhd0RhdGEubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBvdXRwdXRBcnJheVtpXSA9IHJhd0RhdGEuY2hhckNvZGVBdChpKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb3V0cHV0QXJyYXk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvLyBCZXJsYW5nZ2FuYW4gbm90aWZpa2FzaSBwdXNoXHJcbiAgICBhc3luYyBzdWJzY3JpYmVUb1B1c2hOb3RpZmljYXRpb25zKCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGlmICghdGhpcy50b2tlbikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdXRlbnRpa2FzaSBkaXBlcmx1a2FuIHVudHVrIGJlcmxhbmdnYW5hbiBub3RpZmlrYXNpJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHJlZ2lzdHJhdGlvbiA9IGF3YWl0IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFZBUElEIHB1YmxpYyBrZXkgZGFyaSBkb2t1bWVudGFzaVxyXG4gICAgICAgIGNvbnN0IHB1YmxpY0tleSA9ICdCQ0NzMmVvbk1JLTZIMmN0dkZhV2ctVVlkRHYzODdWbm9fYnpVekFMcEI0NDJyMmxDbnNIbXRyeDhiaXlQaV9FLTFmU0dBQktfUXNfR2x2UG9KSnF4YmsnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGF3YWl0IHJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5zdWJzY3JpYmUoe1xyXG4gICAgICAgICAgdXNlclZpc2libGVPbmx5OiB0cnVlLFxyXG4gICAgICAgICAgYXBwbGljYXRpb25TZXJ2ZXJLZXk6IHRoaXMudXJsQmFzZTY0VG9VaW50OEFycmF5KHB1YmxpY0tleSksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gS2lyaW0gZGV0YWlsIGxhbmdnYW5hbiBrZSBzZXJ2ZXJcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVybH0vbm90aWZpY2F0aW9ucy9zdWJzY3JpYmVgLCB7XHJcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy50b2tlbn1gLFxyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHN1YnNjcmlwdGlvbiksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChyZXNwb25zZUpzb24uZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZUpzb24ubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXNwb25zZUpzb247XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgYmVybGFuZ2dhbmFuIG5vdGlmaWthc2kgcHVzaDonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHYWdhbCBiZXJsYW5nZ2FuYW4gbm90aWZpa2FzaS4gU2lsYWthbiBjb2JhIGxhZ2kgbmFudGkuJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICBcclxuICAgIC8vIEJlcmhlbnRpIGJlcmxhbmdnYW5hbiBub3RpZmlrYXNpIHB1c2hcclxuICAgIGFzeW5jIHVuc3Vic2NyaWJlRnJvbVB1c2hOb3RpZmljYXRpb25zKCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGlmICghdGhpcy50b2tlbikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdXRlbnRpa2FzaSBkaXBlcmx1a2FuIHVudHVrIGJlcmhlbnRpIGJlcmxhbmdnYW5hbiBub3RpZmlrYXNpJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHJlZ2lzdHJhdGlvbiA9IGF3YWl0IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5O1xyXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGF3YWl0IHJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24oKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1RpZGFrIGFkYSBsYW5nZ2FuYW4gdW50dWsgZGliYXRhbGthbicpO1xyXG4gICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCBtZXNzYWdlOiAnVGlkYWsgYWRhIGxhbmdnYW5hbiBha3RpZicgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQmVyaGVudGkgYmVybGFuZ2dhbmFuIHNlY2FyYSBsb2thbFxyXG4gICAgICAgIGF3YWl0IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEJlcmkgdGFodSBzZXJ2ZXJcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVybH0vbm90aWZpY2F0aW9ucy9zdWJzY3JpYmVgLCB7XHJcbiAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLnRva2VufWAsXHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICBlbmRwb2ludDogc3Vic2NyaXB0aW9uLmVuZHBvaW50LFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChyZXNwb25zZUpzb24uZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZUpzb24ubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXNwb25zZUpzb247XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgYmVyaGVudGkgYmVybGFuZ2dhbmFuIG5vdGlmaWthc2kgcHVzaDonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHYWdhbCBiZXJoZW50aSBiZXJsYW5nZ2FuYW4gbm90aWZpa2FzaS4gU2lsYWthbiBjb2JhIGxhZ2kgbmFudGkuJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IGRlZmF1bHQgQXBpU2VydmljZTsiLCJjbGFzcyBBdXRoUHJlc2VudGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgdmlldywgYXBpU2VydmljZSB9KSB7XHJcbiAgICAgIHRoaXMuX3ZpZXcgPSB2aWV3O1xyXG4gICAgICB0aGlzLl9hcGlTZXJ2aWNlID0gYXBpU2VydmljZTtcclxuICAgIH1cclxuICBcclxuICAgIGFzeW5jIGxvZ2luKGVtYWlsLCBwYXNzd29yZCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRoaXMuX3ZpZXcuc2hvd0xvYWRpbmcoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLl9hcGlTZXJ2aWNlLmxvZ2luKGVtYWlsLCBwYXNzd29yZCk7XHJcbiAgICAgICAgdGhpcy5fdmlldy5vbkxvZ2luU3VjY2VzcygpO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHRoaXMuX3ZpZXcuc2hvd0Vycm9yKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIHRoaXMuX3ZpZXcuaGlkZUxvYWRpbmcoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBleHBvcnQgZGVmYXVsdCBBdXRoUHJlc2VudGVyOyAgIiwiY2xhc3MgUHJvZHVjdFByZXNlbnRlciB7XHJcbiAgY29uc3RydWN0b3IoeyB2aWV3LCBhcGlTZXJ2aWNlIH0pIHtcclxuICAgIHRoaXMuX3ZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5fYXBpU2VydmljZSA9IGFwaVNlcnZpY2U7XHJcbiAgfVxyXG5cclxuICAvLyBNZW5nYW1iaWwgc2VtdWEgcHJvZHVrXHJcbiAgYXN5bmMgZ2V0QWxsUHJvZHVjdHMoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLl92aWV3LnNob3dMb2FkaW5nKCk7XHJcbiAgICAgIGNvbnN0IHN0b3JpZXMgPSBhd2FpdCB0aGlzLl9hcGlTZXJ2aWNlLmdldEFsbFN0b3JpZXMoMSwgMzAsIDEpOyAvLyBoYWxhbWFuIDEsIDMwIGRhdGEsIGluY2x1ZGUgbG9rYXNpXHJcblxyXG4gICAgICBpZiAoIXN0b3JpZXMgfHwgc3Rvcmllcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICB0aGlzLl92aWV3LnNob3dQcm9kdWN0c0VtcHR5KCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fdmlldy5zaG93UHJvZHVjdHMoc3Rvcmllcyk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMuX3ZpZXcuc2hvd0Vycm9yKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgdGhpcy5fdmlldy5oaWRlTG9hZGluZygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTWVuZ2FtYmlsIGRldGFpbCBzYXR1IHByb2R1a1xyXG4gIGFzeW5jIGdldFByb2R1Y3REZXRhaWwoaWQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuX3ZpZXcuc2hvd0xvYWRpbmcoKTtcclxuICAgICAgY29uc3Qgc3RvcnkgPSBhd2FpdCB0aGlzLl9hcGlTZXJ2aWNlLmdldFN0b3J5RGV0YWlsKGlkKTtcclxuXHJcbiAgICAgIGlmIChzdG9yeSkge1xyXG4gICAgICAgIHRoaXMuX3ZpZXcuc2hvd1Byb2R1Y3REZXRhaWwoc3RvcnkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuX3ZpZXcuc2hvd0Vycm9yKCdDZXJpdGEgdGlkYWsgZGl0ZW11a2FuJyk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMuX3ZpZXcuc2hvd0Vycm9yKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgdGhpcy5fdmlldy5oaWRlTG9hZGluZygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVGFtYmFoIHByb2R1ayBrZSBzZXJ2ZXJcclxuICBhc3luYyBhZGRQcm9kdWN0KHByb2R1Y3REYXRhKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLl92aWV3LnNob3dMb2FkaW5nKCk7XHJcblxyXG4gICAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBwaG90bywgbGF0LCBsb24gfSA9IHByb2R1Y3REYXRhO1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuX2FwaVNlcnZpY2UuYWRkU3RvcnkoZGVzY3JpcHRpb24sIHBob3RvLCBsYXQsIGxvbik7XHJcblxyXG4gICAgICB0aGlzLl92aWV3LnNob3dTdWNjZXNzKCdQcm9kdWsgYmVyaGFzaWwgZGl0YW1iYWhrYW4hJyk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMuX3ZpZXcuc2hvd0Vycm9yKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMuX3ZpZXcuaGlkZUxvYWRpbmcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIE1lbmdlbG9sYSBsb2dpa2Egc3VibWl0IGZvcm0gZGFyaSBBZGRQcm9kdWN0UGFnZVxyXG4gIHN1Ym1pdEFkZFByb2R1Y3RGb3JtKHsgZm9ybSwgZGVzY3JpcHRpb24sIHBob3RvLCBsYXQsIGxvbiB9KSB7XHJcbiAgICBpZiAoIWRlc2NyaXB0aW9uIHx8ICFwaG90byB8fCAhbGF0IHx8ICFsb24pIHtcclxuICAgICAgdGhpcy5fdmlldy5zaG93RXJyb3IoJ0hhcmFwIGxlbmdrYXBpIHNlbXVhIGZpZWxkIHlhbmcgZGlwZXJsdWthbi4nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHByb2R1Y3REYXRhID0geyBkZXNjcmlwdGlvbiwgcGhvdG8sIGxhdCwgbG9uIH07XHJcblxyXG4gICAgdGhpcy5hZGRQcm9kdWN0KHByb2R1Y3REYXRhKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgZm9ybS5yZXNldCgpO1xyXG4gICAgICAgIHRoaXMuX3ZpZXcucmVzZXRGb3JtVUkoKTsgLy8gcmVzZXQgdGFtcGlsYW4gZm9ybSAobWFwLCBrYW1lcmEsIGRsbC4pXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcjL3Byb2R1Y3RzJztcclxuICAgICAgICB9LCAxNTAwKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0dhZ2FsIG1lbmFtYmFoa2FuIHByb2R1azonLCBlcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdFByZXNlbnRlcjsiLCJjb25zdCBpbnN0YW5jZU9mQW55ID0gKG9iamVjdCwgY29uc3RydWN0b3JzKSA9PiBjb25zdHJ1Y3RvcnMuc29tZSgoYykgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcbmxldCBjdXJzb3JBZHZhbmNlTWV0aG9kcztcbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XG4gICAgcmV0dXJuIChpZGJQcm94eWFibGVUeXBlcyB8fFxuICAgICAgICAoaWRiUHJveHlhYmxlVHlwZXMgPSBbXG4gICAgICAgICAgICBJREJEYXRhYmFzZSxcbiAgICAgICAgICAgIElEQk9iamVjdFN0b3JlLFxuICAgICAgICAgICAgSURCSW5kZXgsXG4gICAgICAgICAgICBJREJDdXJzb3IsXG4gICAgICAgICAgICBJREJUcmFuc2FjdGlvbixcbiAgICAgICAgXSkpO1xufVxuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpIHtcbiAgICByZXR1cm4gKGN1cnNvckFkdmFuY2VNZXRob2RzIHx8XG4gICAgICAgIChjdXJzb3JBZHZhbmNlTWV0aG9kcyA9IFtcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuYWR2YW5jZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlUHJpbWFyeUtleSxcbiAgICAgICAgXSkpO1xufVxuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUod3JhcChyZXF1ZXN0LnJlc3VsdCkpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICB9KTtcbiAgICAvLyBUaGlzIG1hcHBpbmcgZXhpc3RzIGluIHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBidXQgZG9lc24ndCBleGlzdCBpbiB0cmFuc2Zvcm1DYWNoZS4gVGhpc1xuICAgIC8vIGlzIGJlY2F1c2Ugd2UgY3JlYXRlIG1hbnkgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0LlxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcbiAgICAvLyBFYXJseSBiYWlsIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCBhIGRvbmUgcHJvbWlzZSBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICBpZiAodHJhbnNhY3Rpb25Eb25lTWFwLmhhcyh0eCkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvciB8fCBuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydEVycm9yJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIENhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAgdHJhbnNhY3Rpb25Eb25lTWFwLnNldCh0eCwgZG9uZSk7XG59XG5sZXQgaWRiUHJveHlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyYW5zYWN0aW9uLmRvbmUuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2RvbmUnKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBNYWtlIHR4LnN0b3JlIHJldHVybiB0aGUgb25seSBzdG9yZSBpbiB0aGUgdHJhbnNhY3Rpb24sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgbWFueS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnc3RvcmUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMV1cbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiByZWNlaXZlci5vYmplY3RTdG9yZShyZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlIHRyYW5zZm9ybSB3aGF0ZXZlciB3ZSBnZXQgYmFjay5cbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0W3Byb3BdKTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uICYmXG4gICAgICAgICAgICAocHJvcCA9PT0gJ2RvbmUnIHx8IHByb3AgPT09ICdzdG9yZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQ7XG4gICAgfSxcbn07XG5mdW5jdGlvbiByZXBsYWNlVHJhcHMoY2FsbGJhY2spIHtcbiAgICBpZGJQcm94eVRyYXBzID0gY2FsbGJhY2soaWRiUHJveHlUcmFwcyk7XG59XG5mdW5jdGlvbiB3cmFwRnVuY3Rpb24oZnVuYykge1xuICAgIC8vIER1ZSB0byBleHBlY3RlZCBvYmplY3QgZXF1YWxpdHkgKHdoaWNoIGlzIGVuZm9yY2VkIGJ5IHRoZSBjYWNoaW5nIGluIGB3cmFwYCksIHdlXG4gICAgLy8gb25seSBjcmVhdGUgb25lIG5ldyBmdW5jIHBlciBmdW5jLlxuICAgIC8vIEN1cnNvciBtZXRob2RzIGFyZSBzcGVjaWFsLCBhcyB0aGUgYmVoYXZpb3VyIGlzIGEgbGl0dGxlIG1vcmUgZGlmZmVyZW50IHRvIHN0YW5kYXJkIElEQi4gSW5cbiAgICAvLyBJREIsIHlvdSBhZHZhbmNlIHRoZSBjdXJzb3IgYW5kIHdhaXQgZm9yIGEgbmV3ICdzdWNjZXNzJyBvbiB0aGUgSURCUmVxdWVzdCB0aGF0IGdhdmUgeW91IHRoZVxuICAgIC8vIGN1cnNvci4gSXQncyBraW5kYSBsaWtlIGEgcHJvbWlzZSB0aGF0IGNhbiByZXNvbHZlIHdpdGggbWFueSB2YWx1ZXMuIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlXG4gICAgLy8gd2l0aCByZWFsIHByb21pc2VzLCBzbyBlYWNoIGFkdmFuY2UgbWV0aG9kcyByZXR1cm5zIGEgbmV3IHByb21pc2UgZm9yIHRoZSBjdXJzb3Igb2JqZWN0LCBvclxuICAgIC8vIHVuZGVmaW5lZCBpZiB0aGUgZW5kIG9mIHRoZSBjdXJzb3IgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICBpZiAoZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKS5pbmNsdWRlcyhmdW5jKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgICAgICBmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcCh0aGlzLnJlcXVlc3QpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICByZXR1cm4gd3JhcChmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncykpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHdyYXBGdW5jdGlvbih2YWx1ZSk7XG4gICAgLy8gVGhpcyBkb2Vzbid0IHJldHVybiwgaXQganVzdCBjcmVhdGVzIGEgJ2RvbmUnIHByb21pc2UgZm9yIHRoZSB0cmFuc2FjdGlvbixcbiAgICAvLyB3aGljaCBpcyBsYXRlciByZXR1cm5lZCBmb3IgdHJhbnNhY3Rpb24uZG9uZSAoc2VlIGlkYk9iamVjdEhhbmRsZXIpLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKVxuICAgICAgICBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odmFsdWUpO1xuICAgIGlmIChpbnN0YW5jZU9mQW55KHZhbHVlLCBnZXRJZGJQcm94eWFibGVUeXBlcygpKSlcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh2YWx1ZSwgaWRiUHJveHlUcmFwcyk7XG4gICAgLy8gUmV0dXJuIHRoZSBzYW1lIHZhbHVlIGJhY2sgaWYgd2UncmUgbm90IGdvaW5nIHRvIHRyYW5zZm9ybSBpdC5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XG4gICAgLy8gV2Ugc29tZXRpbWVzIGdlbmVyYXRlIG11bHRpcGxlIHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdCAoZWcgd2hlbiBjdXJzb3JpbmcpLCBiZWNhdXNlXG4gICAgLy8gSURCIGlzIHdlaXJkIGFuZCBhIHNpbmdsZSBJREJSZXF1ZXN0IGNhbiB5aWVsZCBtYW55IHJlc3BvbnNlcywgc28gdGhlc2UgY2FuJ3QgYmUgY2FjaGVkLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlJlcXVlc3QpXG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHZhbHVlKTtcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IHRyYW5zZm9ybWVkIHRoaXMgdmFsdWUgYmVmb3JlLCByZXVzZSB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXG4gICAgLy8gVGhpcyBpcyBmYXN0ZXIsIGJ1dCBpdCBhbHNvIHByb3ZpZGVzIG9iamVjdCBlcXVhbGl0eS5cbiAgICBpZiAodHJhbnNmb3JtQ2FjaGUuaGFzKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKTtcbiAgICAvLyBOb3QgYWxsIHR5cGVzIGFyZSB0cmFuc2Zvcm1lZC5cbiAgICAvLyBUaGVzZSBtYXkgYmUgcHJpbWl0aXZlIHR5cGVzLCBzbyB0aGV5IGNhbid0IGJlIFdlYWtNYXAga2V5cy5cbiAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHRyYW5zZm9ybUNhY2hlLnNldCh2YWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KG5ld1ZhbHVlLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbn1cbmNvbnN0IHVud3JhcCA9ICh2YWx1ZSkgPT4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG5cbi8qKlxuICogT3BlbiBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXG4gKiBAcGFyYW0gY2FsbGJhY2tzIEFkZGl0aW9uYWwgY2FsbGJhY2tzLlxuICovXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZywgdGVybWluYXRlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4obmFtZSwgdmVyc2lvbik7XG4gICAgY29uc3Qgb3BlblByb21pc2UgPSB3cmFwKHJlcXVlc3QpO1xuICAgIGlmICh1cGdyYWRlKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigndXBncmFkZW5lZWRlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdXBncmFkZSh3cmFwKHJlcXVlc3QucmVzdWx0KSwgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgd3JhcChyZXF1ZXN0LnRyYW5zYWN0aW9uKSwgZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGJsb2NrZWQpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKGV2ZW50KSA9PiBibG9ja2VkKFxuICAgICAgICAvLyBDYXN0aW5nIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQtRE9NLWxpYi1nZW5lcmF0b3IvcHVsbC8xNDA1XG4gICAgICAgIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIGV2ZW50KSk7XG4gICAgfVxuICAgIG9wZW5Qcm9taXNlXG4gICAgICAgIC50aGVuKChkYikgPT4ge1xuICAgICAgICBpZiAodGVybWluYXRlZClcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4gdGVybWluYXRlZCgpKTtcbiAgICAgICAgaWYgKGJsb2NraW5nKSB7XG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCd2ZXJzaW9uY2hhbmdlJywgKGV2ZW50KSA9PiBibG9ja2luZyhldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCBldmVudCkpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgcmV0dXJuIG9wZW5Qcm9taXNlO1xufVxuLyoqXG4gKiBEZWxldGUgYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqL1xuZnVuY3Rpb24gZGVsZXRlREIobmFtZSwgeyBibG9ja2VkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UobmFtZSk7XG4gICAgaWYgKGJsb2NrZWQpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKGV2ZW50KSA9PiBibG9ja2VkKFxuICAgICAgICAvLyBDYXN0aW5nIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQtRE9NLWxpYi1nZW5lcmF0b3IvcHVsbC8xNDA1XG4gICAgICAgIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50KSk7XG4gICAgfVxuICAgIHJldHVybiB3cmFwKHJlcXVlc3QpLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcbn1cblxuY29uc3QgcmVhZE1ldGhvZHMgPSBbJ2dldCcsICdnZXRLZXknLCAnZ2V0QWxsJywgJ2dldEFsbEtleXMnLCAnY291bnQnXTtcbmNvbnN0IHdyaXRlTWV0aG9kcyA9IFsncHV0JywgJ2FkZCcsICdkZWxldGUnLCAnY2xlYXInXTtcbmNvbnN0IGNhY2hlZE1ldGhvZHMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB7XG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSURCRGF0YWJhc2UgJiZcbiAgICAgICAgIShwcm9wIGluIHRhcmdldCkgJiZcbiAgICAgICAgdHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWNoZWRNZXRob2RzLmdldChwcm9wKSlcbiAgICAgICAgcmV0dXJuIGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApO1xuICAgIGNvbnN0IHRhcmdldEZ1bmNOYW1lID0gcHJvcC5yZXBsYWNlKC9Gcm9tSW5kZXgkLywgJycpO1xuICAgIGNvbnN0IHVzZUluZGV4ID0gcHJvcCAhPT0gdGFyZ2V0RnVuY05hbWU7XG4gICAgY29uc3QgaXNXcml0ZSA9IHdyaXRlTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSk7XG4gICAgaWYgKFxuICAgIC8vIEJhaWwgaWYgdGhlIHRhcmdldCBkb2Vzbid0IGV4aXN0IG9uIHRoZSB0YXJnZXQuIEVnLCBnZXRBbGwgaXNuJ3QgaW4gRWRnZS5cbiAgICAhKHRhcmdldEZ1bmNOYW1lIGluICh1c2VJbmRleCA/IElEQkluZGV4IDogSURCT2JqZWN0U3RvcmUpLnByb3RvdHlwZSkgfHxcbiAgICAgICAgIShpc1dyaXRlIHx8IHJlYWRNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBhc3luYyBmdW5jdGlvbiAoc3RvcmVOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIC8vIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6IHVuZGVmaW5lZCBnemlwcHMgYmV0dGVyLCBidXQgZmFpbHMgaW4gRWRnZSA6KFxuICAgICAgICBjb25zdCB0eCA9IHRoaXMudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiAncmVhZG9ubHknKTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHR4LnN0b3JlO1xuICAgICAgICBpZiAodXNlSW5kZXgpXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuaW5kZXgoYXJncy5zaGlmdCgpKTtcbiAgICAgICAgLy8gTXVzdCByZWplY3QgaWYgb3AgcmVqZWN0cy5cbiAgICAgICAgLy8gSWYgaXQncyBhIHdyaXRlIG9wZXJhdGlvbiwgbXVzdCByZWplY3QgaWYgdHguZG9uZSByZWplY3RzLlxuICAgICAgICAvLyBNdXN0IHJlamVjdCB3aXRoIG9wIHJlamVjdGlvbiBmaXJzdC5cbiAgICAgICAgLy8gTXVzdCByZXNvbHZlIHdpdGggb3AgdmFsdWUuXG4gICAgICAgIC8vIE11c3QgaGFuZGxlIGJvdGggcHJvbWlzZXMgKG5vIHVuaGFuZGxlZCByZWplY3Rpb25zKVxuICAgICAgICByZXR1cm4gKGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRhcmdldFt0YXJnZXRGdW5jTmFtZV0oLi4uYXJncyksXG4gICAgICAgICAgICBpc1dyaXRlICYmIHR4LmRvbmUsXG4gICAgICAgIF0pKVswXTtcbiAgICB9O1xuICAgIGNhY2hlZE1ldGhvZHMuc2V0KHByb3AsIG1ldGhvZCk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbnJlcGxhY2VUcmFwcygob2xkVHJhcHMpID0+ICh7XG4gICAgLi4ub2xkVHJhcHMsXG4gICAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpLFxuICAgIGhhczogKHRhcmdldCwgcHJvcCkgPT4gISFnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKSxcbn0pKTtcblxuY29uc3QgYWR2YW5jZU1ldGhvZFByb3BzID0gWydjb250aW51ZScsICdjb250aW51ZVByaW1hcnlLZXknLCAnYWR2YW5jZSddO1xuY29uc3QgbWV0aG9kTWFwID0ge307XG5jb25zdCBhZHZhbmNlUmVzdWx0cyA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBpdHRyUHJveGllZEN1cnNvclRvT3JpZ2luYWxQcm94eSA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBjdXJzb3JJdGVyYXRvclRyYXBzID0ge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgaWYgKCFhZHZhbmNlTWV0aG9kUHJvcHMuaW5jbHVkZXMocHJvcCkpXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgICBsZXQgY2FjaGVkRnVuYyA9IG1ldGhvZE1hcFtwcm9wXTtcbiAgICAgICAgaWYgKCFjYWNoZWRGdW5jKSB7XG4gICAgICAgICAgICBjYWNoZWRGdW5jID0gbWV0aG9kTWFwW3Byb3BdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBhZHZhbmNlUmVzdWx0cy5zZXQodGhpcywgaXR0clByb3hpZWRDdXJzb3JUb09yaWdpbmFsUHJveHkuZ2V0KHRoaXMpW3Byb3BdKC4uLmFyZ3MpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlZEZ1bmM7XG4gICAgfSxcbn07XG5hc3luYyBmdW5jdGlvbiogaXRlcmF0ZSguLi5hcmdzKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXRoaXMtYXNzaWdubWVudFxuICAgIGxldCBjdXJzb3IgPSB0aGlzO1xuICAgIGlmICghKGN1cnNvciBpbnN0YW5jZW9mIElEQkN1cnNvcikpIHtcbiAgICAgICAgY3Vyc29yID0gYXdhaXQgY3Vyc29yLm9wZW5DdXJzb3IoLi4uYXJncyk7XG4gICAgfVxuICAgIGlmICghY3Vyc29yKVxuICAgICAgICByZXR1cm47XG4gICAgY3Vyc29yID0gY3Vyc29yO1xuICAgIGNvbnN0IHByb3hpZWRDdXJzb3IgPSBuZXcgUHJveHkoY3Vyc29yLCBjdXJzb3JJdGVyYXRvclRyYXBzKTtcbiAgICBpdHRyUHJveGllZEN1cnNvclRvT3JpZ2luYWxQcm94eS5zZXQocHJveGllZEN1cnNvciwgY3Vyc29yKTtcbiAgICAvLyBNYXAgdGhpcyBkb3VibGUtcHJveHkgYmFjayB0byB0aGUgb3JpZ2luYWwsIHNvIG90aGVyIGN1cnNvciBtZXRob2RzIHdvcmsuXG4gICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChwcm94aWVkQ3Vyc29yLCB1bndyYXAoY3Vyc29yKSk7XG4gICAgd2hpbGUgKGN1cnNvcikge1xuICAgICAgICB5aWVsZCBwcm94aWVkQ3Vyc29yO1xuICAgICAgICAvLyBJZiBvbmUgb2YgdGhlIGFkdmFuY2luZyBtZXRob2RzIHdhcyBub3QgY2FsbGVkLCBjYWxsIGNvbnRpbnVlKCkuXG4gICAgICAgIGN1cnNvciA9IGF3YWl0IChhZHZhbmNlUmVzdWx0cy5nZXQocHJveGllZEN1cnNvcikgfHwgY3Vyc29yLmNvbnRpbnVlKCkpO1xuICAgICAgICBhZHZhbmNlUmVzdWx0cy5kZWxldGUocHJveGllZEN1cnNvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNJdGVyYXRvclByb3AodGFyZ2V0LCBwcm9wKSB7XG4gICAgcmV0dXJuICgocHJvcCA9PT0gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiZcbiAgICAgICAgaW5zdGFuY2VPZkFueSh0YXJnZXQsIFtJREJJbmRleCwgSURCT2JqZWN0U3RvcmUsIElEQkN1cnNvcl0pKSB8fFxuICAgICAgICAocHJvcCA9PT0gJ2l0ZXJhdGUnICYmIGluc3RhbmNlT2ZBbnkodGFyZ2V0LCBbSURCSW5kZXgsIElEQk9iamVjdFN0b3JlXSkpKTtcbn1cbnJlcGxhY2VUcmFwcygob2xkVHJhcHMpID0+ICh7XG4gICAgLi4ub2xkVHJhcHMsXG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKGlzSXRlcmF0b3JQcm9wKHRhcmdldCwgcHJvcCkpXG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0ZTtcbiAgICAgICAgcmV0dXJuIG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGlzSXRlcmF0b3JQcm9wKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCk7XG4gICAgfSxcbn0pKTtcblxuZXhwb3J0IHsgZGVsZXRlREIsIG9wZW5EQiwgdW53cmFwLCB3cmFwIH07XG4iLCJpbXBvcnQgeyBvcGVuREIgfSBmcm9tICdpZGInO1xyXG5cclxuY29uc3QgREJfTkFNRSA9ICdhaXN5c2hvcC1kYic7XHJcbmNvbnN0IERCX1ZFUlNJT04gPSAxO1xyXG5jb25zdCBPQkpFQ1RfU1RPUkVfTkFNRSA9ICdwcm9kdWN0cyc7XHJcblxyXG5jb25zdCBkYlByb21pc2UgPSBvcGVuREIoREJfTkFNRSwgREJfVkVSU0lPTiwge1xyXG4gIHVwZ3JhZGUoZGIpIHtcclxuICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhPQkpFQ1RfU1RPUkVfTkFNRSkpIHtcclxuICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUsIHsga2V5UGF0aDogJ2lkJyB9KTtcclxuICAgIH1cclxuICB9LFxyXG59KTtcclxuXHJcbmNvbnN0IERhdGFiYXNlID0ge1xyXG4gIGFzeW5jIHB1dFByb2R1Y3QocHJvZHVjdCkge1xyXG4gICAgcmV0dXJuIChhd2FpdCBkYlByb21pc2UpLnB1dChPQkpFQ1RfU1RPUkVfTkFNRSwgcHJvZHVjdCk7XHJcbiAgfSxcclxuICBhc3luYyBnZXRQcm9kdWN0QnlJZChpZCkge1xyXG4gICAgcmV0dXJuIChhd2FpdCBkYlByb21pc2UpLmdldChPQkpFQ1RfU1RPUkVfTkFNRSwgaWQpO1xyXG4gIH0sXHJcbiAgYXN5bmMgZ2V0QWxsUHJvZHVjdHMoKSB7XHJcbiAgICByZXR1cm4gKGF3YWl0IGRiUHJvbWlzZSkuZ2V0QWxsKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICB9LFxyXG4gIGFzeW5jIHJlbW92ZVByb2R1Y3QoaWQpIHtcclxuICAgIHJldHVybiAoYXdhaXQgZGJQcm9taXNlKS5kZWxldGUoT0JKRUNUX1NUT1JFX05BTUUsIGlkKTtcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGF0YWJhc2U7XHJcbiIsImNsYXNzIE5vdEZvdW5kUGFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3BhZ2UtdHJhbnNpdGlvbicpO1xyXG4gICAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVwibm90LWZvdW5kLWNvbnRhaW5lclwiIHJvbGU9XCJhbGVydFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm5vdC1mb3VuZC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlIGZhLTR4XCI+PC9pPlxyXG4gICAgICAgICAgICA8aDE+SGFsYW1hbiBUaWRhayBEaXRlbXVrYW48L2gxPlxyXG4gICAgICAgICAgICA8cD5NYWFmLCBoYWxhbWFuIHlhbmcgQW5kYSBjYXJpIHRpZGFrIHRlcnNlZGlhLjwvcD5cclxuICAgICAgICAgICAgPGEgaHJlZj1cIiMvXCIgY2xhc3M9XCJidG5cIj5LZW1iYWxpIGtlIEJlcmFuZGE8L2E+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgIGA7XHJcbiAgICAgIFxyXG4gICAgICAvLyBBZGQgQ1NTIGZvciB0aGlzIHBhZ2VcclxuICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gICAgICBzdHlsZS50ZXh0Q29udGVudCA9IGBcclxuICAgICAgICAubm90LWZvdW5kLWNvbnRhaW5lciB7XHJcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgICAgbWluLWhlaWdodDogNjB2aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLm5vdC1mb3VuZC1jb250ZW50IHtcclxuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgIHBhZGRpbmc6IDNyZW07XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICAgICAgICAgIGJveC1zaGFkb3c6IDAgNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAubm90LWZvdW5kLWNvbnRlbnQgaSB7XHJcbiAgICAgICAgICBjb2xvcjogdmFyKC0td2FybmluZy1jb2xvcik7XHJcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAubm90LWZvdW5kLWNvbnRlbnQgaDEge1xyXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcclxuICAgICAgICAgIGNvbG9yOiB2YXIoLS1kYXJrLWNvbG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLm5vdC1mb3VuZC1jb250ZW50IHAge1xyXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMS41cmVtO1xyXG4gICAgICAgICAgY29sb3I6ICM2NjY7XHJcbiAgICAgICAgfVxyXG4gICAgICBgO1xyXG4gICAgICBcclxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBhZnRlclJlbmRlcigpIHtcclxuICAgICAgLy8gTm8gYWRkaXRpb25hbCBhY3Rpb25zIG5lZWRlZCBmb3IgdGhlIG5vdCBmb3VuZCBwYWdlXHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBkZWZhdWx0IE5vdEZvdW5kUGFnZTsiLCJpbXBvcnQgJy4uL3N0eWxlcy9zdHlsZS5jc3MnO1xyXG5cclxuLy8gSW1wb3J0IENvbXBvbmVudHNcclxuaW1wb3J0IExvZ2luUGFnZSBmcm9tICcuL2NvbXBvbmVudHMvbG9naW4tcGFnZS5qcyc7XHJcbmltcG9ydCBIb21lUGFnZSBmcm9tICcuL2NvbXBvbmVudHMvaG9tZS1wYWdlLmpzJztcclxuaW1wb3J0IFByb2R1Y3RzUGFnZSBmcm9tICcuL2NvbXBvbmVudHMvcHJvZHVjdHMtcGFnZS5qcyc7XHJcbmltcG9ydCBBZGRQcm9kdWN0UGFnZSBmcm9tICcuL2NvbXBvbmVudHMvYWRkLXByb2R1Y3QtcGFnZS5qcyc7XHJcbmltcG9ydCBGYXZvcml0ZVByb2R1Y3RzUGFnZSBmcm9tICcuL2NvbXBvbmVudHMvZmF2b3JpdGUtcHJvZHVjdHMtcGFnZS5qcyc7XHJcbmltcG9ydCBOb3RGb3VuZFBhZ2UgZnJvbSAnLi9jb21wb25lbnRzL25vdC1mb3VuZC1wYWdlLmpzJztcclxuXHJcbi8vIEltcG9ydCBEYXRhXHJcbmltcG9ydCBBcGlTZXJ2aWNlIGZyb20gJy4vZGF0YS9hcGktc2VydmljZS5qcyc7XHJcblxyXG4vLyBWQVBJRCBQdWJsaWMgS2V5XHJcbmNvbnN0IHZhcGlkUHVibGljS2V5ID0gJ0JDQ3MyZW9uTUktNkgyY3R2RmFXZy1VWWREdjM4N1Zub19ielV6QUxwQjQ0MnIybENuc0htdHJ4OGJpeVBpX0UtMWZTR0FCS19Rc19HbHZQb0pKcXhiayc7XHJcblxyXG4vLyBLb252ZXJzaSBiYXNlNjQga2UgVWludDhBcnJheVxyXG5mdW5jdGlvbiB1cmxCYXNlNjRUb1VpbnQ4QXJyYXkoYmFzZTY0U3RyaW5nKSB7XHJcbiAgY29uc3QgcGFkZGluZyA9ICc9Jy5yZXBlYXQoKDQgLSAoYmFzZTY0U3RyaW5nLmxlbmd0aCAlIDQpKSAlIDQpO1xyXG4gIGNvbnN0IGJhc2U2NCA9IChiYXNlNjRTdHJpbmcgKyBwYWRkaW5nKS5yZXBsYWNlKC8tL2csICcrJykucmVwbGFjZSgvXy9nLCAnLycpO1xyXG4gIGNvbnN0IHJhd0RhdGEgPSB3aW5kb3cuYXRvYihiYXNlNjQpO1xyXG4gIHJldHVybiBVaW50OEFycmF5LmZyb20oWy4uLnJhd0RhdGFdLm1hcChjaGFyID0+IGNoYXIuY2hhckNvZGVBdCgwKSkpO1xyXG59XHJcblxyXG4vLyBSZXF1ZXN0IG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9uXHJcbmFzeW5jIGZ1bmN0aW9uIHJlcXVlc3ROb3RpZmljYXRpb25QZXJtaXNzaW9uKCkge1xyXG4gIGlmICghKCdOb3RpZmljYXRpb24nIGluIHdpbmRvdykpIHtcclxuICAgIGNvbnNvbGUubG9nKCdCcm93c2VyIHRpZGFrIG1lbmR1a3VuZyBub3RpZmlrYXNpJyk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIFxyXG4gIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgXHJcbiAgaWYgKE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uICE9PSAnZGVuaWVkJykge1xyXG4gICAgY29uc3QgcGVybWlzc2lvbiA9IGF3YWl0IE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpO1xyXG4gICAgcmV0dXJuIHBlcm1pc3Npb24gPT09ICdncmFudGVkJztcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vLyBTdWJzY3JpYmUga2UgUHVzaCBOb3RpZmljYXRpb25cclxuYXN5bmMgZnVuY3Rpb24gc3Vic2NyaWJlVXNlclRvUHVzaCgpIHtcclxuICB0cnkge1xyXG4gICAgLy8gUmVxdWVzdCBwZXJtaXNzaW9uIHRlcmxlYmloIGRhaHVsdVxyXG4gICAgY29uc3QgaGFzUGVybWlzc2lvbiA9IGF3YWl0IHJlcXVlc3ROb3RpZmljYXRpb25QZXJtaXNzaW9uKCk7XHJcbiAgICBpZiAoIWhhc1Blcm1pc3Npb24pIHtcclxuICAgICAgY29uc29sZS5sb2coJ1Blcm1pc3Npb24gbm90aWZpa2FzaSBkaXRvbGFrJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZWdpc3RyYXRpb24gPSBhd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeTtcclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgYWxyZWFkeSBzdWJzY3JpYmVkXHJcbiAgICBjb25zdCBleGlzdGluZ1N1YnNjcmlwdGlvbiA9IGF3YWl0IHJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24oKTtcclxuICAgIGlmIChleGlzdGluZ1N1YnNjcmlwdGlvbikge1xyXG4gICAgICBjb25zb2xlLmxvZygnQWxyZWFkeSBzdWJzY3JpYmVkIHRvIHB1c2ggbm90aWZpY2F0aW9ucycpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gYXdhaXQgcmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLnN1YnNjcmliZSh7XHJcbiAgICAgIHVzZXJWaXNpYmxlT25seTogdHJ1ZSxcclxuICAgICAgYXBwbGljYXRpb25TZXJ2ZXJLZXk6IHVybEJhc2U2NFRvVWludDhBcnJheSh2YXBpZFB1YmxpY0tleSlcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XHJcbiAgICBpZiAoIXRva2VuKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgZW5kcG9pbnQ6IHN1YnNjcmlwdGlvbi5lbmRwb2ludCxcclxuICAgICAga2V5czoge1xyXG4gICAgICAgIHAyNTZkaDogYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLm5ldyBVaW50OEFycmF5KHN1YnNjcmlwdGlvbi5nZXRLZXkoJ3AyNTZkaCcpKSkpLFxyXG4gICAgICAgIGF1dGg6IGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZSguLi5uZXcgVWludDhBcnJheShzdWJzY3JpcHRpb24uZ2V0S2V5KCdhdXRoJykpKSlcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL3N0b3J5LWFwaS5kaWNvZGluZy5kZXYvdjEvbm90aWZpY2F0aW9ucy9zdWJzY3JpYmUnLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dG9rZW59YCxcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBcclxuICAgIGlmIChyZXN1bHQuZXJyb3IgPT09IGZhbHNlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgc3Vic2NyaWJlZCB0byBwdXNoIG5vdGlmaWNhdGlvbnM6JywgcmVzdWx0KTtcclxuICAgICAgXHJcbiAgICAgIC8vIFRlc3Qgbm90aWZpY2F0aW9uIChvcHNpb25hbClcclxuICAgICAgc2hvd1Rlc3ROb3RpZmljYXRpb24oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzdWJzY3JpYmU6JywgcmVzdWx0KTtcclxuICAgIH1cclxuXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0dhZ2FsIHN1YnNjcmliZSBwdXNoOicsIGVycm9yKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIFNob3cgdGVzdCBub3RpZmljYXRpb24gdW50dWsgdGVzdGluZ1xyXG5mdW5jdGlvbiBzaG93VGVzdE5vdGlmaWNhdGlvbigpIHtcclxuICBpZiAoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT09ICdncmFudGVkJykge1xyXG4gICAgbmV3IE5vdGlmaWNhdGlvbignUHVzaCBOb3RpZmljYXRpb24gQWt0aWYhJywge1xyXG4gICAgICBib2R5OiAnQW5kYSBha2FuIG1lbmVyaW1hIG5vdGlmaWthc2kgdW50dWsgc3RvcnkgYmFydScsXHJcbiAgICAgIGljb246ICcvaWNvbi0xOTJ4MTkyLnBuZydcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuLy8gUmVnaXN0ZXIgU2VydmljZSBXb3JrZXJcclxuYXN5bmMgZnVuY3Rpb24gcmVnaXN0ZXJTZXJ2aWNlV29ya2VyKCkge1xyXG4gIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZWdpc3RyYXRpb24gPSBhd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignL3N3LmJ1bmRsZS5qcycpOyAvLyBwYXN0aWthbiBwYXRoIGJlbmFyXHJcbiAgICAgIGNvbnNvbGUubG9nKCdTZXJ2aWNlIFdvcmtlciB0ZXJkYWZ0YXIhJywgcmVnaXN0cmF0aW9uKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFdhaXQgZm9yIHNlcnZpY2Ugd29ya2VyIHRvIGJlIHJlYWR5XHJcbiAgICAgIGF3YWl0IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5O1xyXG4gICAgICBjb25zb2xlLmxvZygnU2VydmljZSBXb3JrZXIgcmVhZHkhJyk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gcmVnaXN0cmF0aW9uO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignU1cgZ2FnYWw6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5sb2coJ1NlcnZpY2UgV29ya2VyIHRpZGFrIGRpZHVrdW5nIGJyb3dzZXInKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuLy8gUm91dGVzXHJcbmNvbnN0IHJvdXRlcyA9IHtcclxuICAnLyc6IEhvbWVQYWdlLFxyXG4gICcvcHJvZHVjdHMnOiBQcm9kdWN0c1BhZ2UsXHJcbiAgJy9hZGQnOiBBZGRQcm9kdWN0UGFnZSxcclxuICAnL2Zhdm9yaXRlJzogRmF2b3JpdGVQcm9kdWN0c1BhZ2UsXHJcbiAgJy9sb2dpbic6IExvZ2luUGFnZSxcclxufTtcclxuXHJcbi8vIEFQSSBTZXJ2aWNlIEluc3RhbmNlXHJcbmNvbnN0IGFwaVNlcnZpY2UgPSBuZXcgQXBpU2VydmljZSgpO1xyXG5cclxuLy8gVXBkYXRlIGxheW91dCBiZXJkYXNhcmthbiB0b2tlblxyXG5jb25zdCB1cGRhdGVMYXlvdXQgPSAoaXNBdXRoZW50aWNhdGVkKSA9PiB7XHJcbiAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZGVyJyk7XHJcbiAgY29uc3QgZm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9vdGVyJyk7XHJcbiAgaGVhZGVyLnN0eWxlLmRpc3BsYXkgPSBpc0F1dGhlbnRpY2F0ZWQgPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gIGZvb3Rlci5zdHlsZS5kaXNwbGF5ID0gaXNBdXRoZW50aWNhdGVkID8gJ2Jsb2NrJyA6ICdub25lJztcclxufTtcclxuXHJcbi8vIFJlbmRlciBoYWxhbWFuIGJlcmRhc2Fya2FuIGhhc2hcclxuY29uc3Qgcm91dGVyID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XHJcbiAgY29uc3QgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnNsaWNlKDEpIHx8ICcvJztcclxuICBjb25zdCBpc0xvZ2luUGFnZSA9IGhhc2ggPT09ICcvbG9naW4nO1xyXG5cclxuICB1cGRhdGVMYXlvdXQoISF0b2tlbik7XHJcblxyXG4gIGlmICghdG9rZW4gJiYgIWlzTG9naW5QYWdlKSB7XHJcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcjL2xvZ2luJztcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmICh0b2tlbiAmJiBpc0xvZ2luUGFnZSkge1xyXG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnIy8nO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGFnZSA9IHJvdXRlc1toYXNoXSB8fCBOb3RGb3VuZFBhZ2U7XHJcbiAgY29uc3QgbWFpbkNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbkNvbnRlbnQnKTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGlmIChkb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKSB7XHJcbiAgICAgIGRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24oKCkgPT4ge1xyXG4gICAgICAgIG1haW5Db250ZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGNvbnN0IHBhZ2VFbGVtZW50ID0gbmV3IHBhZ2UoKTtcclxuICAgICAgICBtYWluQ29udGVudC5hcHBlbmRDaGlsZChwYWdlRWxlbWVudC5yZW5kZXIoKSk7XHJcbiAgICAgICAgcGFnZUVsZW1lbnQuYWZ0ZXJSZW5kZXIoKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtYWluQ29udGVudC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgY29uc3QgcGFnZUVsZW1lbnQgPSBuZXcgcGFnZSgpO1xyXG4gICAgICBtYWluQ29udGVudC5hcHBlbmRDaGlsZChwYWdlRWxlbWVudC5yZW5kZXIoKSk7XHJcbiAgICAgIHBhZ2VFbGVtZW50LmFmdGVyUmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRva2VuKSB7XHJcbiAgICAgIHVwZGF0ZUFjdGl2ZUxpbmsoaGFzaCk7XHJcbiAgICB9XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZW5kZXJpbmcgcGFnZTonLCBlcnJvcik7XHJcbiAgICBtYWluQ29udGVudC5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cImVycm9yLW1lc3NhZ2VcIj5UZXJqYWRpIGtlc2FsYWhhbiBzYWF0IG1lbXVhdCBoYWxhbWFuOiAke2Vycm9yLm1lc3NhZ2V9PC9kaXY+YDtcclxuICB9XHJcbn07XHJcblxyXG4vLyBIaWdobGlnaHQgbWVudSBha3RpZlxyXG5jb25zdCB1cGRhdGVBY3RpdmVMaW5rID0gKGhhc2gpID0+IHtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmF2LWxpbmsnKS5mb3JFYWNoKGxpbmsgPT4gbGluay5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSk7XHJcblxyXG4gIGNvbnN0IGxpbmtzID0ge1xyXG4gICAgJy8nOiAnaG9tZUxpbmsnLFxyXG4gICAgJy9wcm9kdWN0cyc6ICdwcm9kdWN0c0xpbmsnLFxyXG4gICAgJy9hZGQnOiAnYWRkTGluaycsXHJcbiAgICAnL2Zhdm9yaXRlJzogJ2Zhdm9yaXRlTGluaydcclxuICB9O1xyXG5cclxuICBjb25zdCBjdXJyZW50TGluayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxpbmtzW2hhc2hdKTtcclxuICBpZiAoY3VycmVudExpbmspIHtcclxuICAgIGN1cnJlbnRMaW5rLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIExvZ291dCBzZXR1cFxyXG5jb25zdCBzZXR1cExvZ291dEhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgY29uc3QgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbmF2IHVsJyk7XHJcbiAgaWYgKG5hdiAmJiAhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ291dExpbmsnKSkge1xyXG4gICAgY29uc3QgbG9nb3V0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICBjb25zdCBsb2dvdXRMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgbG9nb3V0TGluay5ocmVmID0gJyMnO1xyXG4gICAgbG9nb3V0TGluay5pZCA9ICdsb2dvdXRMaW5rJztcclxuICAgIGxvZ291dExpbmsuY2xhc3NOYW1lID0gJ25hdi1saW5rJztcclxuICAgIGxvZ291dExpbmsudGV4dENvbnRlbnQgPSAnTG9nb3V0JztcclxuICAgIGxvZ291dExpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicpO1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcjL2xvZ2luJztcclxuICAgIH0pO1xyXG4gICAgbG9nb3V0SXRlbS5hcHBlbmRDaGlsZChsb2dvdXRMaW5rKTtcclxuICAgIG5hdi5hcHBlbmRDaGlsZChsb2dvdXRJdGVtKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBIYW1idXJnZXIgbWVudSB0b2dnbGVcclxuY29uc3QgaGFtYnVyZ2VyTWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoYW1idXJnZXJNZW51Jyk7XHJcbmNvbnN0IG5hdmlnYXRpb25NZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbmF2Jyk7XHJcblxyXG5pZiAoaGFtYnVyZ2VyTWVudSAmJiBuYXZpZ2F0aW9uTWVudSkge1xyXG4gIGhhbWJ1cmdlck1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBuYXZpZ2F0aW9uTWVudS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcclxuICB9KTtcclxuXHJcbiAgLy8gQ2xvc2UgbWVudSBqaWthIGtsaWsgZGkgbHVhclxyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoIW5hdmlnYXRpb25NZW51LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgIWhhbWJ1cmdlck1lbnUuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xyXG4gICAgICBuYXZpZ2F0aW9uTWVudS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuLy8gU2tpcCB0byBDb250ZW50IFN1cHBvcnRcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuICBjb25zdCBtYWluQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluQ29udGVudCcpO1xyXG4gIGNvbnN0IHNraXBMaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNraXAtbGluaycpO1xyXG4gIGlmIChza2lwTGluayAmJiBtYWluQ29udGVudCkge1xyXG4gICAgc2tpcExpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgc2tpcExpbmsuYmx1cigpO1xyXG4gICAgICBtYWluQ29udGVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XHJcbiAgICAgIG1haW5Db250ZW50LmZvY3VzKCk7XHJcbiAgICAgIG1haW5Db250ZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbi8vIEluaXQgcm91dGVyIGRhbiBldmVudFxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGFzeW5jICgpID0+IHtcclxuICBhd2FpdCByZWdpc3RlclNlcnZpY2VXb3JrZXIoKTtcclxuICBhd2FpdCByb3V0ZXIoKTtcclxuXHJcbiAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcclxuICBpZiAodG9rZW4pIHtcclxuICAgIHNldHVwTG9nb3V0SGFuZGxlcigpO1xyXG4gICAgLy8gRGVsYXkgc2VkaWtpdCB1bnR1ayBtZW1hc3Rpa2FuIHNlcnZpY2Ugd29ya2VyIHJlYWR5XHJcbiAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgc3Vic2NyaWJlVXNlclRvUHVzaCgpO1xyXG4gICAgfSwgMTAwMCk7XHJcbiAgfVxyXG59KTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgcm91dGVyKTtcclxuXHJcbi8vIERldGVrc2kgcGVydWJhaGFuIHRva2VuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgKGV2ZW50KSA9PiB7XHJcbiAgaWYgKGV2ZW50LmtleSA9PT0gJ3Rva2VuJykge1xyXG4gICAgdXBkYXRlTGF5b3V0KCEhZXZlbnQubmV3VmFsdWUpO1xyXG4gICAgaWYgKGV2ZW50Lm5ld1ZhbHVlKSB7XHJcbiAgICAgIHNldHVwTG9nb3V0SGFuZGxlcigpO1xyXG4gICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcclxuICAgICAgICBhd2FpdCBzdWJzY3JpYmVVc2VyVG9QdXNoKCk7XHJcbiAgICAgIH0sIDEwMDApO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcblxyXG5leHBvcnQgeyByb3V0ZXIgfTsiLCJjbGFzcyBIb21lUGFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3BhZ2UtdHJhbnNpdGlvbicpO1xyXG4gICAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVwiaGVyb1wiIHJvbGU9XCJyZWdpb25cIiBhcmlhLWxhYmVsbGVkYnk9XCJob21lLXRpdGxlXCI+XHJcbiAgICAgICAgICA8aDEgaWQ9XCJob21lLXRpdGxlXCI+U2VsYW1hdCBEYXRhbmcgZGkgQWlzeVNob3A8L2gxPlxyXG4gICAgICAgICAgPHA+QmVsYW5qYSBvbmxpbmUgamFkaSBsZWJpaCBtZW55ZW5hbmdrYW4gZGVuZ2FuIEFpc3lTaG9wISBEYXBhdGthbiBwcm9kdWsgYmVya3VhbGl0YXMgcHJlbWl1bSBkYXJpIHJpYnVhbiBwYXJ0bmVyIHRlcnBlcmNheWEga2FtaSBkZW5nYW4gaGFyZ2EgeWFuZyBiZXJzYWluZy4gTmlrbWF0aSBwcm9tbyBzcGVzaWFsIHNldGlhcCBoYXJpLCBwZW5naXJpbWFuIHN1cGVyIGNlcGF0IGtlIHNlbHVydWggSW5kb25lc2lhLCBkYW4gamFtaW5hbiB1YW5nIGtlbWJhbGkgMTAwJS4gQWlzeVNob3AgaGFkaXIgc2ViYWdhaSBzb2x1c2kga2VidXR1aGFuIGdheWEgaGlkdXAgbW9kZXJuIEFuZGEgLSBkYXJpIGZhc2hpb24sIGVsZWt0cm9uaWssIGhpbmdnYSBrZWJ1dHVoYW4gcnVtYWggdGFuZ2dhLCBzZW11YSBhZGEgZGFsYW0gc2F0dSBwbGF0Zm9ybSEuPC9wPlxyXG4gICAgICAgICAgPGEgaHJlZj1cIiMvcHJvZHVjdHNcIiBjbGFzcz1cImJ0blwiPk11bGFpIEJlbGFuamEgU2VrYXJhbmc8L2E+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVwiZmVhdHVyZWQtc2VjdGlvblwiIHJvbGU9XCJyZWdpb25cIiBhcmlhLWxhYmVsbGVkYnk9XCJmZWF0dXJlZC10aXRsZVwiPlxyXG4gICAgICAgICAgPGgyIGlkPVwiZmVhdHVyZWQtdGl0bGVcIj5NZW5nYXBhIE1lbWlsaWggS2FtaTwvaDI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmVhdHVyZWQtY29udGVudFwiPlxyXG4gICAgICAgICAgICA8cD5BaXN5U2hvcCBtZW1iZXJpa2FuIHBlbmdhbGFtYW4gYmVyYmVsYW5qYSBvbmxpbmUgdGVyYmFpayBkZW5nYW4gYmVyYmFnYWkga2V1bmdndWxhbiwgYW50YXJhIGxhaW46PC9wPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmVhdHVyZXNcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmVhdHVyZVwiPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdHJ1Y2sgZmEtMnhcIj48L2k+XHJcbiAgICAgICAgICAgICAgICA8aDM+UGVuZ2lyaW1hbiBDZXBhdDwvaDM+XHJcbiAgICAgICAgICAgICAgICA8cD5Qcm9kdWsgZGlraXJpbSBsYW5nc3VuZyBrZSBhbGFtYXQgQW5kYSBkZW5nYW4gY2VwYXQgZGFuIGFtYW4uPC9wPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmZWF0dXJlXCI+XHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zaGllbGQtYWx0IGZhLTJ4XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPGgzPlBlbWJheWFyYW4gQW1hbjwvaDM+XHJcbiAgICAgICAgICAgICAgICA8cD5UcmFuc2Frc2kgQW5kYSBkaWphbWluIGFtYW4gZGVuZ2FuIHNpc3RlbSBwZW1iYXlhcmFuIHRlcnBlcmNheWEuPC9wPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmZWF0dXJlXCI+XHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1oZWFkc2V0IGZhLTJ4XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPGgzPkxheWFuYW4gUGVsYW5nZ2FuIDI0Lzc8L2gzPlxyXG4gICAgICAgICAgICAgICAgPHA+VGltIGthbWkgc2lhcCBtZW1iYW50dSBBbmRhIGthcGFuIHNhamEuPC9wPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgYDtcclxuICAgICAgXHJcbiAgICAgIC8vIEFkZCBDU1MgZm9yIHRoaXMgcGFnZVxyXG4gICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XHJcbiAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gYFxyXG5cclxuICAgICAgICAuZmVhdHVyZWQtc2VjdGlvbiBoMiB7XHJcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuZmVhdHVyZWQtY29udGVudCB7XHJcbiAgICAgICAgICBtYXJnaW4tdG9wOiAycmVtO1xyXG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAuZmVhdHVyZXMge1xyXG4gICAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMjUwcHgsIDFmcikpO1xyXG4gICAgICAgICAgZ2FwOiAycmVtO1xyXG4gICAgICAgICAgbWFyZ2luLXRvcDogMnJlbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLmZlYXR1cmUge1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgICAgICAgYm94LXNoYWRvdzogMCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLmZlYXR1cmUgaSB7XHJcbiAgICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XHJcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAuZmVhdHVyZSBoMyB7XHJcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgIC5mZWF0dXJlcyB7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgYDtcclxuICAgICAgXHJcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgYWZ0ZXJSZW5kZXIoKSB7XHJcbiAgICAgIC8vIE5vIGFkZGl0aW9uYWwgYWN0aW9ucyBuZWVkZWQgZm9yIHRoZSBob21lIHBhZ2VcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IGRlZmF1bHQgSG9tZVBhZ2U7IiwiaW1wb3J0IEFwaVNlcnZpY2UgZnJvbSAnLi4vZGF0YS9hcGktc2VydmljZS5qcyc7XHJcbmltcG9ydCBQcm9kdWN0UHJlc2VudGVyIGZyb20gJy4uL3ByZXNlbnRlci9wcm9kdWN0LXByZXNlbnRlci5qcyc7XHJcbmltcG9ydCBEYXRhYmFzZSBmcm9tICcuLi9kYXRhL2RhdGFiYXNlLmpzJzsgLy8g8J+UpSBUYW1iYWhrYW4gaW5pIHVudHVrIEluZGV4ZWREQlxyXG5cclxuY2xhc3MgUHJvZHVjdHNQYWdlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XHJcbiAgICB0aGlzLmFwaVNlcnZpY2UgPSBuZXcgQXBpU2VydmljZSgpO1xyXG4gICAgdGhpcy5wcmVzZW50ZXIgPSBuZXcgUHJvZHVjdFByZXNlbnRlcih7IHZpZXc6IHRoaXMsIGFwaVNlcnZpY2U6IHRoaXMuYXBpU2VydmljZSB9KTtcclxuICAgIHRoaXMubWFwID0gbnVsbDtcclxuICAgIHRoaXMubWFya2VycyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncGFnZS10cmFuc2l0aW9uJyk7XHJcbiAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gYFxyXG4gICAgICA8c2VjdGlvbiByb2xlPVwicmVnaW9uXCIgYXJpYS1sYWJlbGxlZGJ5PVwicHJvZHVjdHMtdGl0bGVcIj5cclxuICAgICAgICA8aDIgaWQ9XCJwcm9kdWN0cy10aXRsZVwiPlByb2R1azwvaDI+XHJcbiAgICAgICAgPGRpdiBpZD1cImxvYWRpbmdcIiBjbGFzcz1cImxvYWRpbmdcIj48ZGl2IGNsYXNzPVwibG9hZGluZy1zcGlubmVyXCI+PC9kaXY+PC9kaXY+XHJcbiAgICAgICAgPGRpdiBpZD1cImVycm9yLWNvbnRhaW5lclwiPjwvZGl2PlxyXG4gICAgICAgIDxkaXYgaWQ9XCJwcm9kdWN0cy1jb250YWluZXJcIiBjbGFzcz1cInByb2R1Y3RzLWNvbnRhaW5lclwiPjwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYXAtY29udGFpbmVyXCI+PGgyPkxva2FzaSBQcm9kdWs8L2gyPjxkaXYgaWQ9XCJtYXBcIj48L2Rpdj48L2Rpdj5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgYDtcclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBhZnRlclJlbmRlcigpIHtcclxuICAgIHRoaXMuaW5pdE1hcCgpO1xyXG4gICAgdGhpcy5wcmVzZW50ZXIuZ2V0QWxsUHJvZHVjdHMoKTtcclxuICB9XHJcblxyXG4gIGluaXRNYXAoKSB7XHJcbiAgICB0aGlzLm1hcCA9IEwubWFwKCdtYXAnKS5zZXRWaWV3KFstMi41LCAxMThdLCA0KTtcclxuICAgIEwudGlsZUxheWVyKCdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsIHtcclxuICAgICAgYXR0cmlidXRpb246ICcmY29weTsgT3BlblN0cmVldE1hcCBjb250cmlidXRvcnMnXHJcbiAgICB9KS5hZGRUbyh0aGlzLm1hcCk7XHJcbiAgfVxyXG5cclxuICBzaG93TG9hZGluZygpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkaW5nJykuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICB9XHJcblxyXG4gIGhpZGVMb2FkaW5nKCkge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmcnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gIH1cclxuXHJcbiAgc2hvd0Vycm9yKG1lc3NhZ2UpIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlcnJvci1jb250YWluZXInKTtcclxuICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cImVycm9yLW1lc3NhZ2VcIj48cD4ke21lc3NhZ2V9PC9wPjwvZGl2PmA7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzaG93UHJvZHVjdHMocHJvZHVjdHMpIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9kdWN0cy1jb250YWluZXInKTtcclxuICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgIHRoaXMuY2xlYXJNYXJrZXJzKCk7XHJcblxyXG4gICAgZm9yIChjb25zdCBwcm9kdWN0IG9mIHByb2R1Y3RzKSB7XHJcbiAgICAgIGNvbnN0IGNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgY2FyZC5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0LWNhcmQnKTtcclxuICAgICAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IG5ldyBEYXRlKHByb2R1Y3QuY3JlYXRlZEF0KS50b0xvY2FsZURhdGVTdHJpbmcoJ2lkLUlEJyk7XHJcblxyXG4gICAgICBjb25zdCBpc0Zhdm9yaXRlZCA9IGF3YWl0IERhdGFiYXNlLmdldFByb2R1Y3RCeUlkKHByb2R1Y3QuaWQpO1xyXG5cclxuICAgICAgY2FyZC5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGltZyBzcmM9XCIke3Byb2R1Y3QucGhvdG9Vcmx9XCIgY2xhc3M9XCJwcm9kdWN0LWltYWdlXCIgYWx0PVwiJHtwcm9kdWN0LmRlc2NyaXB0aW9ufVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0LWluZm9cIj5cclxuICAgICAgICAgIDxoMyBjbGFzcz1cInByb2R1Y3QtdGl0bGVcIj4ke3Byb2R1Y3QubmFtZX08L2gzPlxyXG4gICAgICAgICAgPHAgY2xhc3M9XCJwcm9kdWN0LWRlc2NyaXB0aW9uXCI+JHtwcm9kdWN0LmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgIDxwIGNsYXNzPVwicHJvZHVjdC1sb2NhdGlvblwiPlxyXG4gICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYXAtbWFya2VyLWFsdFwiPjwvaT4gJHtwcm9kdWN0LmxhdCA/PyAnLSd9LCAke3Byb2R1Y3QubG9uID8/ICctJ31cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxwPjxzbWFsbD5EaXBvc3Rpbmc6ICR7Zm9ybWF0dGVkRGF0ZX08L3NtYWxsPjwvcD5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0LWFjdGlvbnNcIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1zYXZlXCIgaWQ9XCJzYXZlLWJ0bi0ke3Byb2R1Y3QuaWR9XCI+XHJcbiAgICAgICAgICAgICAgJHtpc0Zhdm9yaXRlZCA/ICfwn5KWIEhhcHVzIGRhcmkgRmF2b3JpdCcgOiAn8J+kjSBTaW1wYW4ga2UgRmF2b3JpdCd9XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIGA7XHJcblxyXG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2FyZCk7XHJcblxyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc2F2ZS1idG4tJHtwcm9kdWN0LmlkfWApLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzU2F2ZWQgPSBhd2FpdCBEYXRhYmFzZS5nZXRQcm9kdWN0QnlJZChwcm9kdWN0LmlkKTtcclxuICAgICAgICBpZiAoaXNTYXZlZCkge1xyXG4gICAgICAgICAgYXdhaXQgRGF0YWJhc2UucmVtb3ZlUHJvZHVjdChwcm9kdWN0LmlkKTtcclxuICAgICAgICAgIGFsZXJ0KCdQcm9kdWsgZGloYXB1cyBkYXJpIGZhdm9yaXQuJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGF3YWl0IERhdGFiYXNlLnB1dFByb2R1Y3QocHJvZHVjdCk7XHJcbiAgICAgICAgICBhbGVydCgnUHJvZHVrIGRpc2ltcGFuIGtlIGZhdm9yaXQhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJlc2VudGVyLmdldEFsbFByb2R1Y3RzKCk7IC8vIFJlZnJlc2ggdGFtcGlsYW5cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAocHJvZHVjdC5sYXQgJiYgcHJvZHVjdC5sb24pIHRoaXMuYWRkTWFya2VyKHByb2R1Y3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm1hcmtlcnMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IGdyb3VwID0gTC5mZWF0dXJlR3JvdXAodGhpcy5tYXJrZXJzKTtcclxuICAgICAgdGhpcy5tYXAuZml0Qm91bmRzKGdyb3VwLmdldEJvdW5kcygpLCB7IHBhZGRpbmc6IFs1MCwgNTBdIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2hvd1Byb2R1Y3RzRW1wdHkoKSB7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjdHMtY29udGFpbmVyJyk7XHJcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gYFxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZW1wdHktc3RhdGVcIj5cclxuICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1ib3gtb3BlbiBmYS0zeFwiPjwvaT5cclxuICAgICAgICA8aDI+VGlkYWsgYWRhIHByb2R1azwvaDI+XHJcbiAgICAgICAgPHA+QmVsdW0gYWRhIHByb2R1ayB0ZXJzZWRpYSBzYWF0IGluaS48L3A+XHJcbiAgICAgICAgPGEgaHJlZj1cIiMvYWRkXCIgY2xhc3M9XCJidG5cIj5UYW1iYWggUHJvZHVrPC9hPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGA7XHJcbiAgfVxyXG5cclxuICBhZGRNYXJrZXIocHJvZHVjdCkge1xyXG4gICAgY29uc3QgbWFya2VyID0gTC5tYXJrZXIoW3Byb2R1Y3QubGF0LCBwcm9kdWN0Lmxvbl0pO1xyXG4gICAgbWFya2VyLmJpbmRQb3B1cChgXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJwb3B1cC1jb250ZW50XCI+XHJcbiAgICAgICAgPGltZyBzcmM9XCIke3Byb2R1Y3QucGhvdG9Vcmx9XCIgYWx0PVwiJHtwcm9kdWN0LmRlc2NyaXB0aW9ufVwiIHN0eWxlPVwid2lkdGg6MTAwJTttYXgtaGVpZ2h0OjE1MHB4O29iamVjdC1maXQ6Y292ZXI7XCI+XHJcbiAgICAgICAgPGgzPiR7cHJvZHVjdC5uYW1lfTwvaDM+XHJcbiAgICAgICAgPHA+JHtwcm9kdWN0LmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgKTtcclxuICAgIG1hcmtlci5hZGRUbyh0aGlzLm1hcCk7XHJcbiAgICB0aGlzLm1hcmtlcnMucHVzaChtYXJrZXIpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJNYXJrZXJzKCkge1xyXG4gICAgdGhpcy5tYXJrZXJzLmZvckVhY2gobSA9PiB0aGlzLm1hcC5yZW1vdmVMYXllcihtKSk7XHJcbiAgICB0aGlzLm1hcmtlcnMgPSBbXTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByb2R1Y3RzUGFnZTtcclxuIiwiaW1wb3J0IEFwaVNlcnZpY2UgZnJvbSAnLi4vZGF0YS9hcGktc2VydmljZS5qcyc7XHJcbmltcG9ydCBQcm9kdWN0UHJlc2VudGVyIGZyb20gJy4uL3ByZXNlbnRlci9wcm9kdWN0LXByZXNlbnRlci5qcyc7XHJcblxyXG5jbGFzcyBBZGRQcm9kdWN0UGFnZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xyXG4gICAgdGhpcy5hcGlTZXJ2aWNlID0gbmV3IEFwaVNlcnZpY2UoKTtcclxuICAgIHRoaXMucHJlc2VudGVyID0gbmV3IFByb2R1Y3RQcmVzZW50ZXIoe1xyXG4gICAgICB2aWV3OiB0aGlzLFxyXG4gICAgICBhcGlTZXJ2aWNlOiB0aGlzLmFwaVNlcnZpY2VcclxuICAgIH0pO1xyXG4gICAgdGhpcy5tYXAgPSBudWxsO1xyXG4gICAgdGhpcy5tYXJrZXIgPSBudWxsO1xyXG4gICAgdGhpcy5sYXRpdHVkZSA9IG51bGw7XHJcbiAgICB0aGlzLmxvbmdpdHVkZSA9IG51bGw7XHJcbiAgICB0aGlzLnBob3RvQmxvYiA9IG51bGw7XHJcbiAgICB0aGlzLm1lZGlhU3RyZWFtID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3BhZ2UtdHJhbnNpdGlvbicpO1xyXG4gICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IGBcclxuICAgICAgPHNlY3Rpb24gcm9sZT1cInJlZ2lvblwiIGFyaWEtbGFiZWxsZWRieT1cImFkZC1wcm9kdWN0LXRpdGxlXCI+XHJcbiAgICAgICAgPGgyIGlkPVwiYWRkLXByb2R1Y3QtdGl0bGVcIj5UYW1iYWggUHJvZHVrIEJhcnU8L2gyPlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxkaXYgaWQ9XCJsb2FkaW5nXCIgY2xhc3M9XCJsb2FkaW5nXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxvYWRpbmctc3Bpbm5lclwiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxkaXYgaWQ9XCJtZXNzYWdlLWNvbnRhaW5lclwiPjwvZGl2PlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgPGZvcm0gaWQ9XCJhZGRQcm9kdWN0Rm9ybVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJuYW1hXCI+TmFtYSBQcm9kdWsgPC9sYWJlbD5cclxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cIm5hbWFcIiBuYW1lPVwibmFtYVwiIHJvd3M9XCI0XCIgcmVxdWlyZWQ+PC9pbnB1dD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJkZXNjcmlwdGlvblwiPkRlc2tyaXBzaSBQcm9kdWsgPC9sYWJlbD5cclxuICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9XCJkZXNjcmlwdGlvblwiIG5hbWU9XCJkZXNjcmlwdGlvblwiIHJvd3M9XCI0XCIgcmVxdWlyZWQ+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgIDxsYWJlbD5Gb3RvIFByb2R1ayA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYW1lcmEtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICA8dmlkZW8gaWQ9XCJ2aWRlb0VsZW1lbnRcIiBhdXRvcGxheT48L3ZpZGVvPlxyXG4gICAgICAgICAgICAgICAgPGltZyBpZD1cImNhcHR1cmVkSW1hZ2VcIiBhbHQ9XCJGb3RvIHByb2R1ayB5YW5nIGRpYW1iaWxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYW1lcmEtYnV0dG9uc1wiPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInN0YXJ0Q2FtZXJhQnRuXCIgY2xhc3M9XCJidG5cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1jYW1lcmFcIj48L2k+IEJ1a2EgS2FtZXJhXHJcbiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cImNhcHR1cmVCdG5cIiBjbGFzcz1cImJ0blwiIGRpc2FibGVkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWNhbWVyYS1yZXRyb1wiPjwvaT4gQW1iaWwgRm90b1xyXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZXRha2VCdG5cIiBjbGFzcz1cImJ0blwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1yZWRvXCI+PC9pPiBBbWJpbCBVbGFuZ1xyXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgPGxhYmVsPkxva2FzaSBQcm9kdWsgPC9sYWJlbD5cclxuICAgICAgICAgICAgICA8cD5LbGlrIHBhZGEgcGV0YSB1bnR1ayBtZW5lbnR1a2FuIGxva2FzaSBwcm9kdWs8L3A+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvY2F0aW9uLW1hcC1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJsb2NhdGlvbk1hcFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJjb29yZGluYXRlcy1kaXNwbGF5XCIgY2xhc3M9XCJjb29yZGluYXRlcy1kaXNwbGF5XCI+XHJcbiAgICAgICAgICAgICAgICBCZWx1bSBhZGEgbG9rYXNpIHlhbmcgZGlwaWxpaFxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGlkPVwic3VibWl0QnRuXCIgY2xhc3M9XCJidG5cIiBkaXNhYmxlZD5cclxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1wbHVzLWNpcmNsZVwiPjwvaT4gVGFtYmFoIFByb2R1a1xyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgYDtcclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBhZnRlclJlbmRlcigpIHtcclxuICAgIHRoaXMuaW5pdE1hcCgpO1xyXG4gICAgdGhpcy5pbml0Q2FtZXJhQnV0dG9ucygpO1xyXG4gICAgdGhpcy5pbml0Rm9ybVN1Ym1pc3Npb24oKTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsICgpID0+IHRoaXMuc3RvcENhbWVyYVN0cmVhbSgpKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCAoKSA9PiB0aGlzLnN0b3BDYW1lcmFTdHJlYW0oKSk7XHJcbiAgfVxyXG5cclxuICBpbml0TWFwKCkge1xyXG4gICAgdGhpcy5tYXAgPSBMLm1hcCgnbG9jYXRpb25NYXAnKS5zZXRWaWV3KFstNi4yMDg4LCAxMDYuODQ1Nl0sIDEwKTtcclxuICAgIEwudGlsZUxheWVyKCdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsIHtcclxuICAgICAgYXR0cmlidXRpb246ICcmY29weTsgT3BlblN0cmVldE1hcCBjb250cmlidXRvcnMnXHJcbiAgICB9KS5hZGRUbyh0aGlzLm1hcCk7XHJcblxyXG4gICAgdGhpcy5tYXAub24oJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgdGhpcy5zZXRMb2NhdGlvbihlLmxhdGxuZy5sYXQsIGUubGF0bG5nLmxuZyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldExvY2F0aW9uKGxhdCwgbG5nKSB7XHJcbiAgICB0aGlzLmxhdGl0dWRlID0gbGF0O1xyXG4gICAgdGhpcy5sb25naXR1ZGUgPSBsbmc7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nvb3JkaW5hdGVzLWRpc3BsYXknKS5pbm5lckhUTUwgPSBgXHJcbiAgICAgIExva2FzaSBkaXBpbGloOiAke2xhdC50b0ZpeGVkKDYpfSwgJHtsbmcudG9GaXhlZCg2KX1cclxuICAgIGA7XHJcblxyXG4gICAgaWYgKHRoaXMubWFya2VyKSB7XHJcbiAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHRoaXMubWFya2VyKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm1hcmtlciA9IEwubWFya2VyKFtsYXQsIGxuZ10pLmFkZFRvKHRoaXMubWFwKTtcclxuICAgIHRoaXMuY2hlY2tGb3JtVmFsaWRpdHkoKTtcclxuICB9XHJcblxyXG4gIGluaXRDYW1lcmFCdXR0b25zKCkge1xyXG4gICAgY29uc3Qgc3RhcnRDYW1lcmFCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhcnRDYW1lcmFCdG4nKTtcclxuICAgIGNvbnN0IGNhcHR1cmVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FwdHVyZUJ0bicpO1xyXG4gICAgY29uc3QgcmV0YWtlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JldGFrZUJ0bicpO1xyXG4gICAgY29uc3QgdmlkZW9FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvRWxlbWVudCcpO1xyXG4gICAgY29uc3QgY2FwdHVyZWRJbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXB0dXJlZEltYWdlJyk7XHJcblxyXG4gICAgc3RhcnRDYW1lcmFCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGhpcy5tZWRpYVN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHsgdmlkZW86IHRydWUgfSk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCA9IHRoaXMubWVkaWFTdHJlYW07XHJcbiAgICAgICAgdmlkZW9FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIGNhcHR1cmVCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBzdGFydENhbWVyYUJ0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgYWNjZXNzaW5nIGNhbWVyYTonLCBlcnJvcik7XHJcbiAgICAgICAgdGhpcy5zaG93RXJyb3IoJ1RpZGFrIGRhcGF0IG1lbmdha3NlcyBrYW1lcmEuIFBhc3Rpa2FuIEFuZGEgbWVtYmVyaWthbiBpemluIGRhbiBrYW1lcmEgdGVyc2VkaWEuJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNhcHR1cmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgIGNhbnZhcy53aWR0aCA9IHZpZGVvRWxlbWVudC52aWRlb1dpZHRoO1xyXG4gICAgICBjYW52YXMuaGVpZ2h0ID0gdmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0O1xyXG4gICAgICBjb250ZXh0LmRyYXdJbWFnZSh2aWRlb0VsZW1lbnQsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICBjYW52YXMudG9CbG9iKChibG9iKSA9PiB7XHJcbiAgICAgICAgdGhpcy5waG90b0Jsb2IgPSBibG9iO1xyXG4gICAgICAgIGNhcHR1cmVkSW1hZ2Uuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICBjYXB0dXJlZEltYWdlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIHRoaXMuc3RvcENhbWVyYVN0cmVhbSgpO1xyXG4gICAgICAgIHZpZGVvRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIGNhcHR1cmVCdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICByZXRha2VCdG4uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG4gICAgICAgIHRoaXMuY2hlY2tGb3JtVmFsaWRpdHkoKTtcclxuICAgICAgfSwgJ2ltYWdlL2pwZWcnLCAwLjgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0YWtlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBjYXB0dXJlZEltYWdlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGNhcHR1cmVkSW1hZ2Uuc3JjID0gJyc7XHJcbiAgICAgIHRoaXMucGhvdG9CbG9iID0gbnVsbDtcclxuICAgICAgc3RhcnRDYW1lcmFCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgY2FwdHVyZUJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XHJcbiAgICAgIHJldGFrZUJ0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICB0aGlzLmNoZWNrRm9ybVZhbGlkaXR5KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0b3BDYW1lcmFTdHJlYW0oKSB7XHJcbiAgICBpZiAodGhpcy5tZWRpYVN0cmVhbSkge1xyXG4gICAgICB0aGlzLm1lZGlhU3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4gdHJhY2suc3RvcCgpKTtcclxuICAgICAgdGhpcy5tZWRpYVN0cmVhbSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0Rm9ybVN1Ym1pc3Npb24oKSB7XHJcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZFByb2R1Y3RGb3JtJyk7XHJcbiAgICBjb25zdCBkZXNjcmlwdGlvbklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2NyaXB0aW9uJyk7XHJcblxyXG4gICAgZGVzY3JpcHRpb25JbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcclxuICAgICAgdGhpcy5jaGVja0Zvcm1WYWxpZGl0eSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMucHJlc2VudGVyLnN1Ym1pdEFkZFByb2R1Y3RGb3JtKHtcclxuICAgICAgICBmb3JtLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbklucHV0LnZhbHVlLFxyXG4gICAgICAgIHBob3RvOiB0aGlzLnBob3RvQmxvYixcclxuICAgICAgICBsYXQ6IHRoaXMubGF0aXR1ZGUsXHJcbiAgICAgICAgbG9uOiB0aGlzLmxvbmdpdHVkZVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaXNGb3JtVmFsaWQoKSB7XHJcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbicpLnZhbHVlO1xyXG4gICAgcmV0dXJuIGRlc2NyaXB0aW9uICYmIHRoaXMucGhvdG9CbG9iICYmIHRoaXMubGF0aXR1ZGUgJiYgdGhpcy5sb25naXR1ZGU7XHJcbiAgfVxyXG5cclxuICBjaGVja0Zvcm1WYWxpZGl0eSgpIHtcclxuICAgIGNvbnN0IHN1Ym1pdEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJtaXRCdG4nKTtcclxuICAgIHN1Ym1pdEJ0bi5kaXNhYmxlZCA9ICF0aGlzLmlzRm9ybVZhbGlkKCk7XHJcbiAgfVxyXG5cclxuICBzaG93TG9hZGluZygpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkaW5nJykuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICB9XHJcblxyXG4gIGhpZGVMb2FkaW5nKCkge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmcnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gIH1cclxuXHJcbiAgc2hvd0Vycm9yKG1lc3NhZ2UpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2VDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZS1jb250YWluZXInKTtcclxuICAgIG1lc3NhZ2VDb250YWluZXIuaW5uZXJIVE1MID0gYFxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiPlxyXG4gICAgICAgIDxwPiR7bWVzc2FnZX08L3A+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYDtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgfSwgNTAwMCk7XHJcbiAgfVxyXG5cclxuICBzaG93U3VjY2VzcyhtZXNzYWdlKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UtY29udGFpbmVyJyk7XHJcbiAgICBtZXNzYWdlQ29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgPGRpdiBjbGFzcz1cInN1Y2Nlc3MtbWVzc2FnZVwiPlxyXG4gICAgICAgIDxwPiR7bWVzc2FnZX08L3A+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYDtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgfSwgNTAwMCk7XHJcbiAgfVxyXG5cclxuICByZXNldEZvcm1VSSgpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXB0dXJlZEltYWdlJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXB0dXJlZEltYWdlJykuc3JjID0gJyc7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmV0YWtlQnRuJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFydENhbWVyYUJ0bicpLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FwdHVyZUJ0bicpLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgIHRoaXMucGhvdG9CbG9iID0gbnVsbDtcclxuXHJcbiAgICBpZiAodGhpcy5tYXJrZXIpIHtcclxuICAgICAgdGhpcy5tYXAucmVtb3ZlTGF5ZXIodGhpcy5tYXJrZXIpO1xyXG4gICAgICB0aGlzLm1hcmtlciA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5sYXRpdHVkZSA9IG51bGw7XHJcbiAgICB0aGlzLmxvbmdpdHVkZSA9IG51bGw7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29vcmRpbmF0ZXMtZGlzcGxheScpLmlubmVySFRNTCA9ICdCZWx1bSBhZGEgbG9rYXNpIHlhbmcgZGlwaWxpaCc7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBZGRQcm9kdWN0UGFnZTsiLCIvLyBGaWxlOiBTY3JpcHQvY29tcG9uZW50cy9mYXZvcml0ZS1wcm9kdWN0cy1wYWdlLmpzXHJcbmltcG9ydCBEYXRhYmFzZSBmcm9tICcuLi9kYXRhL2RhdGFiYXNlLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZhdm9yaXRlUHJvZHVjdHNQYWdlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwYWdlLXRyYW5zaXRpb24nKTtcclxuICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSBgXHJcbiAgICAgIDxzZWN0aW9uIHJvbGU9XCJyZWdpb25cIiBhcmlhLWxhYmVsbGVkYnk9XCJmYXZvcml0ZXMtdGl0bGVcIj5cclxuICAgICAgICA8aDIgaWQ9XCJmYXZvcml0ZXMtdGl0bGVcIiBjbGFzcz1cInNlY3Rpb24tdGl0bGVcIj5Qcm9kdWsgRmF2b3JpdCBTYXlhPC9oMj5cclxuICAgICAgICA8ZGl2IGlkPVwibG9hZGluZ1wiIGNsYXNzPVwibG9hZGluZ1wiPjxkaXYgY2xhc3M9XCJsb2FkaW5nLXNwaW5uZXJcIj48L2Rpdj48L2Rpdj5cclxuICAgICAgICA8ZGl2IGlkPVwiZXJyb3ItY29udGFpbmVyXCI+PC9kaXY+XHJcbiAgICAgICAgPGRpdiBpZD1cImZhdm9yaXRlLXByb2R1Y3RzLWNvbnRhaW5lclwiIGNsYXNzPVwicHJvZHVjdHMtY29udGFpbmVyXCI+PC9kaXY+XHJcbiAgICAgIDwvc2VjdGlvbj5cclxuICAgIGA7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgYWZ0ZXJSZW5kZXIoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYXZvcml0ZS1wcm9kdWN0cy1jb250YWluZXInKTtcclxuICAgICAgY29uc3QgZXJyb3JDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXJyb3ItY29udGFpbmVyJyk7XHJcbiAgICAgIGVycm9yQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICBcclxuICAgICAgLy8gUGFzdGlrYW4gZGF0YWJhc2Ugc3VkYWggdGVyaW5pc2lhbGlzYXNpXHJcbiAgICAgIGlmICghRGF0YWJhc2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHRpZGFrIHRlcnNlZGlhJyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGZhdm9yaXRlUHJvZHVjdHMgPSBhd2FpdCBEYXRhYmFzZS5nZXRBbGxQcm9kdWN0cygpO1xyXG4gICAgICB0aGlzLmhpZGVMb2FkaW5nKCk7XHJcblxyXG4gICAgICBpZiAoIWZhdm9yaXRlUHJvZHVjdHMgfHwgZmF2b3JpdGVQcm9kdWN0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5LXN0YXRlXCI+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWhlYXJ0LWJyb2tlbiBmYS0zeFwiPjwvaT5cclxuICAgICAgICAgICAgPGgyPkJlbHVtIGFkYSBwcm9kdWsgZmF2b3JpdDwvaDI+XHJcbiAgICAgICAgICAgIDxwPlNpbXBhbiBwcm9kdWsgdGVybGViaWggZGFodWx1IHVudHVrIG11bmN1bCBkaSBzaW5pLjwvcD5cclxuICAgICAgICAgICAgPGEgaHJlZj1cIiMvcHJvZHVjdHNcIiBjbGFzcz1cImJ0blwiPkxpaGF0IFByb2R1azwvYT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7IC8vIEJlcnNpaGthbiBjb250YWluZXIgc2ViZWx1bSBtZW5hbWJhaGthbiBrb250ZW4gYmFydVxyXG4gICAgICBcclxuICAgICAgZmF2b3JpdGVQcm9kdWN0cy5mb3JFYWNoKHByb2R1Y3QgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBuZXcgRGF0ZShwcm9kdWN0LmNyZWF0ZWRBdCkudG9Mb2NhbGVEYXRlU3RyaW5nKCdpZC1JRCcpO1xyXG4gICAgICAgIGNvbnN0IGNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjYXJkLmNsYXNzTGlzdC5hZGQoJ3Byb2R1Y3QtY2FyZCcpO1xyXG5cclxuICAgICAgICBjYXJkLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgIDxpbWcgc3JjPVwiJHtwcm9kdWN0LnBob3RvVXJsfVwiIGNsYXNzPVwicHJvZHVjdC1pbWFnZVwiIGFsdD1cIiR7cHJvZHVjdC5kZXNjcmlwdGlvbn1cIiBsb2FkaW5nPVwibGF6eVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3QtaW5mb1wiPlxyXG4gICAgICAgICAgICA8aDMgY2xhc3M9XCJwcm9kdWN0LXRpdGxlXCI+JHtwcm9kdWN0Lm5hbWV9PC9oMz5cclxuICAgICAgICAgICAgPHAgY2xhc3M9XCJwcm9kdWN0LWRlc2NyaXB0aW9uXCI+JHtwcm9kdWN0LmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgICAgPHAgY2xhc3M9XCJwcm9kdWN0LWxvY2F0aW9uXCI+XHJcbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFwLW1hcmtlci1hbHRcIj48L2k+ICR7cHJvZHVjdC5sYXQgPz8gJy0nfSwgJHtwcm9kdWN0LmxvbiA/PyAnLSd9XHJcbiAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgPHA+PHNtYWxsPkRpcG9zdGluZzogJHtmb3JtYXR0ZWREYXRlfTwvc21hbGw+PC9wPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdC1hY3Rpb25zXCI+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1yZW1vdmVcIiBkYXRhLWlkPVwiJHtwcm9kdWN0LmlkfVwiPuKdjCBIYXB1cyBkYXJpIEZhdm9yaXQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2FyZCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gVGFtYmFoa2FuIGV2ZW50IGxpc3RlbmVycyBzZXRlbGFoIHNlbXVhIGVsZW1lbiBkaXRhbWJhaGthbiBrZSBET01cclxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcclxuICAgICAgY29uc3QgZXJyb3JDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXJyb3ItY29udGFpbmVyJyk7XHJcbiAgICAgIGVycm9yQ29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiPlxyXG4gICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGVcIj48L2k+XHJcbiAgICAgICAgICA8cD5UZXJqYWRpIGtlc2FsYWhhbiBzYWF0IG1lbXVhdCBwcm9kdWsgZmF2b3JpdDogJHtlcnJvci5tZXNzYWdlfTwvcD5cclxuICAgICAgICAgIDxidXR0b24gaWQ9XCJyZXRyeS1idXR0b25cIiBjbGFzcz1cImJ0blwiPkNvYmEgTGFnaTwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICBgO1xyXG4gICAgICBcclxuICAgICAgLy8gVGFtYmFoa2FuIGV2ZW50IGxpc3RlbmVyIHVudHVrIHRvbWJvbCBjb2JhIGxhZ2lcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JldHJ5LWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXIoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIGZhdm9yaXRlIHByb2R1Y3RzOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnRuLXJlbW92ZScpLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGUpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgaWQgPSBlLnRhcmdldC5kYXRhc2V0LmlkO1xyXG4gICAgICAgICAgaWYgKCFpZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lEIHByb2R1ayB0aWRhayB2YWxpZCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBLb25maXJtYXNpIHNlYmVsdW0gbWVuZ2hhcHVzXHJcbiAgICAgICAgICBpZiAoY29uZmlybSgnQXBha2FoIEFuZGEgeWFraW4gaW5naW4gbWVuZ2hhcHVzIHByb2R1ayBpbmkgZGFyaSBmYXZvcml0PycpKSB7XHJcbiAgICAgICAgICAgIC8vIFRhbXBpbGthbiBhbmltYXNpIGxvYWRpbmcgcGFkYSB0b21ib2xcclxuICAgICAgICAgICAgZS50YXJnZXQuaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmFzIGZhLXNwaW5uZXIgZmEtc3BpblwiPjwvaT4gTWVuZ2hhcHVzLi4uJztcclxuICAgICAgICAgICAgZS50YXJnZXQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYXdhaXQgRGF0YWJhc2UucmVtb3ZlUHJvZHVjdChpZCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBBbmltYXNpIGZhZGUgb3V0IHBhZGEgY2FyZCBwcm9kdWtcclxuICAgICAgICAgICAgY29uc3QgY2FyZCA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5wcm9kdWN0LWNhcmQnKTtcclxuICAgICAgICAgICAgY2FyZC5zdHlsZS50cmFuc2l0aW9uID0gJ29wYWNpdHkgMC41cyc7XHJcbiAgICAgICAgICAgIGNhcmQuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGNhcmQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgLy8gUGVyaWtzYSBhcGFrYWggbWFzaWggYWRhIHByb2R1ayB0ZXJzaXNhXHJcbiAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zhdm9yaXRlLXByb2R1Y3RzLWNvbnRhaW5lcicpO1xyXG4gICAgICAgICAgICAgIGlmICghY29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5LXN0YXRlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtaGVhcnQtYnJva2VuIGZhLTN4XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMj5CZWx1bSBhZGEgcHJvZHVrIGZhdm9yaXQ8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwPlNpbXBhbiBwcm9kdWsgdGVybGViaWggZGFodWx1IHVudHVrIG11bmN1bCBkaSBzaW5pLjwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiIy9wcm9kdWN0c1wiIGNsYXNzPVwiYnRuXCI+TGloYXQgUHJvZHVrPC9hPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC8vIE5vdGlmaWthc2kgc3Vrc2VzXHJcbiAgICAgICAgICAgICAgdGhpcy5zaG93Tm90aWZpY2F0aW9uKCdQcm9kdWsgYmVyaGFzaWwgZGloYXB1cyBkYXJpIGZhdm9yaXQnKTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVtb3ZpbmcgcHJvZHVjdDonLCBlcnJvcik7XHJcbiAgICAgICAgICB0aGlzLnNob3dOb3RpZmljYXRpb24oJ0dhZ2FsIG1lbmdoYXB1cyBwcm9kdWs6ICcgKyBlcnJvci5tZXNzYWdlLCAnZXJyb3InKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHNob3dOb3RpZmljYXRpb24obWVzc2FnZSwgdHlwZSA9ICdzdWNjZXNzJykge1xyXG4gICAgLy8gQ2VrIGFwYWthaCBzdWRhaCBhZGEgbm90aWZpa2FzaVxyXG4gICAgY29uc3QgZXhpc3RpbmdOb3RpZiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub3RpZmljYXRpb24nKTtcclxuICAgIGlmIChleGlzdGluZ05vdGlmKSB7XHJcbiAgICAgIGV4aXN0aW5nTm90aWYucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEJ1YXQgbm90aWZpa2FzaSBiYXJ1XHJcbiAgICBjb25zdCBub3RpZmljYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIG5vdGlmaWNhdGlvbi5jbGFzc05hbWUgPSBgbm90aWZpY2F0aW9uICR7dHlwZX1gO1xyXG4gICAgbm90aWZpY2F0aW9uLmlubmVySFRNTCA9IGBcclxuICAgICAgPGRpdiBjbGFzcz1cIm5vdGlmaWNhdGlvbi1jb250ZW50XCI+XHJcbiAgICAgICAgPGkgY2xhc3M9XCJmYXMgJHt0eXBlID09PSAnc3VjY2VzcycgPyAnZmEtY2hlY2stY2lyY2xlJyA6ICdmYS1leGNsYW1hdGlvbi1jaXJjbGUnfVwiPjwvaT5cclxuICAgICAgICA8cD4ke21lc3NhZ2V9PC9wPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGA7XHJcbiAgICBcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm90aWZpY2F0aW9uKTtcclxuICAgIFxyXG4gICAgLy8gQW5pbWFzaSBtYXN1a1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIG5vdGlmaWNhdGlvbi5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XHJcbiAgICB9LCAxMCk7XHJcbiAgICBcclxuICAgIC8vIEhhcHVzIG5vdGlmaWthc2kgc2V0ZWxhaCAzIGRldGlrXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgbm90aWZpY2F0aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgbm90aWZpY2F0aW9uLnJlbW92ZSgpO1xyXG4gICAgICB9LCAzMDApO1xyXG4gICAgfSwgMzAwMCk7XHJcbiAgfVxyXG5cclxuICBzaG93TG9hZGluZygpIHtcclxuICAgIGNvbnN0IGxvYWRpbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGluZycpO1xyXG4gICAgaWYgKGxvYWRpbmcpIHtcclxuICAgICAgbG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGlkZUxvYWRpbmcoKSB7XHJcbiAgICBjb25zdCBsb2FkaW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmcnKTtcclxuICAgIGlmIChsb2FkaW5nKSB7XHJcbiAgICAgIGxvYWRpbmcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgQXBpU2VydmljZSBmcm9tICcuLi9kYXRhL2FwaS1zZXJ2aWNlLmpzJztcclxuaW1wb3J0IEF1dGhQcmVzZW50ZXIgZnJvbSAnLi4vcHJlc2VudGVyL2F1dGgtcHJlc2VudGVyLmpzJztcclxuXHJcbmNsYXNzIExvZ2luUGFnZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFwaVNlcnZpY2UgPSBuZXcgQXBpU2VydmljZSgpO1xyXG4gICAgdGhpcy5wcmVzZW50ZXIgPSBuZXcgQXV0aFByZXNlbnRlcih7IHZpZXc6IHRoaXMsIGFwaVNlcnZpY2U6IHRoaXMuYXBpU2VydmljZSB9KTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29udGFpbmVyLmNsYXNzTmFtZSA9ICdsb2dpbi1jb250YWluZXInO1xyXG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgPGRpdiBjbGFzcz1cImxvZ2luLXdyYXBwZXJcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwibG9naW4taGVhZGVyXCI+XHJcbiAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zdG9yZVwiPjwvaT5cclxuICAgICAgICAgIDxoMT5BaXN5U2hvcDwvaDE+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJmb3JtLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgPGZvcm0gaWQ9XCJsb2dpbkZvcm1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiZW1haWxcIj5FbWFpbDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiIGlkPVwiZW1haWxcIiByZXF1aXJlZD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInBhc3N3b3JkXCI+UGFzc3dvcmQ8L2xhYmVsPlxyXG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBpZD1cInBhc3N3b3JkXCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0bmxvZ2luIGJ0bi1wcmltYXJ5XCI+TG9naW48L2J1dHRvbj5cclxuICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYDtcclxuICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgfVxyXG5cclxuICBhZnRlclJlbmRlcigpIHtcclxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9naW5Gb3JtJyk7XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29uc3QgZW1haWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1haWwnKS52YWx1ZTtcclxuICAgICAgY29uc3QgcGFzc3dvcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFzc3dvcmQnKS52YWx1ZTtcclxuICAgICAgdGhpcy5wcmVzZW50ZXIubG9naW4oZW1haWwsIHBhc3N3b3JkKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2hvd0xvYWRpbmcoKSB7XHJcbiAgICBjb25zdCBidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b25bdHlwZT1cInN1Ym1pdFwiXScpO1xyXG4gICAgYnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIGJ0bi5kYXRhc2V0Lm9yaWdpbmFsVGV4dCA9IGJ0bi50ZXh0Q29udGVudDtcclxuICAgIGJ0bi50ZXh0Q29udGVudCA9ICdMb2FkaW5nLi4uJztcclxuICB9XHJcblxyXG4gIGhpZGVMb2FkaW5nKCkge1xyXG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uW3R5cGU9XCJzdWJtaXRcIl0nKTtcclxuICAgIGJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgYnRuLnRleHRDb250ZW50ID0gYnRuLmRhdGFzZXQub3JpZ2luYWxUZXh0IHx8ICdMb2dpbic7XHJcbiAgfVxyXG5cclxuICBzaG93RXJyb3IobWVzc2FnZSkge1xyXG4gICAgYWxlcnQobWVzc2FnZSk7XHJcbiAgfVxyXG5cclxuICBvbkxvZ2luU3VjY2VzcygpIHtcclxuICAgIGFsZXJ0KCdMb2dpbiBiZXJoYXNpbCcpO1xyXG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnIy8nO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTG9naW5QYWdlOyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsImkiLCJsZW5ndGgiLCJtb2R1bGVzVG9Eb20iLCJsaXN0Iiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIml0ZW0iLCJpZCIsImJhc2UiLCJjb3VudCIsImNvbmNhdCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJzdXBwb3J0cyIsImxheWVyIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwicHVzaCIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJjb250ZW50IiwibmVlZExheWVyIiwiam9pbiIsIm1vZHVsZXMiLCJkZWR1cGUiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJtZW1vIiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJsb2NhbHMiLCJjb25zdHJ1Y3RvciIsImJhc2VVcmwiLCJ0b2tlbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRUb2tlbiIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiZ2V0VG9rZW4iLCJyZWdpc3RlciIsIm5hbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwicmVzcG9uc2VKc29uIiwianNvbiIsImVycm9yIiwibWVzc2FnZSIsImNvbnNvbGUiLCJsb2dpbiIsImxvZ2luUmVzdWx0IiwidXNlcklkIiwibG9nb3V0IiwiZ2V0QWxsU3RvcmllcyIsInBhZ2UiLCJzaXplIiwibG9jYXRpb24iLCJ1cmwiLCJsaXN0U3RvcnkiLCJBdXRob3JpemF0aW9uIiwiY2FjaGUiLCJjYWNoZXMiLCJvcGVuIiwicHV0IiwiY2xvbmUiLCJ3YXJuIiwiY2FjaGVkUmVzcG9uc2UiLCJtYXRjaCIsImFkZFN0b3J5IiwiZGVzY3JpcHRpb24iLCJwaG90byIsImxhdCIsImxvbiIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJhZGRTdG9yeUFzR3Vlc3QiLCJyZWdpc3RlclNlcnZpY2VXb3JrZXIiLCJuYXZpZ2F0b3IiLCJyZWdpc3RyYXRpb24iLCJzZXJ2aWNlV29ya2VyIiwibG9nIiwidXJsQmFzZTY0VG9VaW50OEFycmF5IiwiYmFzZTY0U3RyaW5nIiwicmVwZWF0IiwicmVwbGFjZSIsInJhd0RhdGEiLCJhdG9iIiwib3V0cHV0QXJyYXkiLCJVaW50OEFycmF5IiwiY2hhckNvZGVBdCIsInN1YnNjcmliZVRvUHVzaE5vdGlmaWNhdGlvbnMiLCJyZWFkeSIsInB1YmxpY0tleSIsInN1YnNjcmlwdGlvbiIsInB1c2hNYW5hZ2VyIiwic3Vic2NyaWJlIiwidXNlclZpc2libGVPbmx5IiwiYXBwbGljYXRpb25TZXJ2ZXJLZXkiLCJ1bnN1YnNjcmliZUZyb21QdXNoTm90aWZpY2F0aW9ucyIsImdldFN1YnNjcmlwdGlvbiIsInVuc3Vic2NyaWJlIiwiZW5kcG9pbnQiLCJ2aWV3IiwiYXBpU2VydmljZSIsIl92aWV3IiwiX2FwaVNlcnZpY2UiLCJzaG93TG9hZGluZyIsIm9uTG9naW5TdWNjZXNzIiwic2hvd0Vycm9yIiwiaGlkZUxvYWRpbmciLCJnZXRBbGxQcm9kdWN0cyIsInN0b3JpZXMiLCJzaG93UHJvZHVjdHMiLCJzaG93UHJvZHVjdHNFbXB0eSIsImdldFByb2R1Y3REZXRhaWwiLCJzdG9yeSIsImdldFN0b3J5RGV0YWlsIiwic2hvd1Byb2R1Y3REZXRhaWwiLCJhZGRQcm9kdWN0IiwicHJvZHVjdERhdGEiLCJzaG93U3VjY2VzcyIsInN1Ym1pdEFkZFByb2R1Y3RGb3JtIiwiZm9ybSIsInRoZW4iLCJyZXNldCIsInJlc2V0Rm9ybVVJIiwic2V0VGltZW91dCIsImhhc2giLCJjYXRjaCIsImluc3RhbmNlT2ZBbnkiLCJvYmplY3QiLCJjb25zdHJ1Y3RvcnMiLCJzb21lIiwiYyIsImlkYlByb3h5YWJsZVR5cGVzIiwiY3Vyc29yQWR2YW5jZU1ldGhvZHMiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJXZWFrTWFwIiwidHJhbnNmb3JtQ2FjaGUiLCJyZXZlcnNlVHJhbnNmb3JtQ2FjaGUiLCJpZGJQcm94eVRyYXBzIiwicmVjZWl2ZXIiLCJJREJUcmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJvYmplY3RTdG9yZSIsIndyYXAiLCJzZXQiLCJ2YWx1ZSIsImhhcyIsInJlcGxhY2VUcmFwcyIsImNhbGxiYWNrIiwidHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSIsImZ1bmMiLCJJREJDdXJzb3IiLCJhZHZhbmNlIiwiY29udGludWUiLCJjb250aW51ZVByaW1hcnlLZXkiLCJpbmNsdWRlcyIsImFyZ3MiLCJ1bndyYXAiLCJyZXF1ZXN0IiwidHgiLCJkb25lIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ1bmxpc3RlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjb21wbGV0ZSIsIkRPTUV4Y2VwdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24iLCJJREJEYXRhYmFzZSIsIklEQk9iamVjdFN0b3JlIiwiSURCSW5kZXgiLCJQcm94eSIsIklEQlJlcXVlc3QiLCJwcm9taXNlIiwic3VjY2VzcyIsInByb21pc2lmeVJlcXVlc3QiLCJuZXdWYWx1ZSIsInJlYWRNZXRob2RzIiwid3JpdGVNZXRob2RzIiwiY2FjaGVkTWV0aG9kcyIsIk1hcCIsImdldE1ldGhvZCIsInRhcmdldEZ1bmNOYW1lIiwidXNlSW5kZXgiLCJpc1dyaXRlIiwiYXN5bmMiLCJzdG9yZU5hbWUiLCJ0cmFuc2FjdGlvbiIsInN0b3JlIiwic2hpZnQiLCJhbGwiLCJvbGRUcmFwcyIsImFkdmFuY2VNZXRob2RQcm9wcyIsIm1ldGhvZE1hcCIsImFkdmFuY2VSZXN1bHRzIiwiaXR0clByb3hpZWRDdXJzb3JUb09yaWdpbmFsUHJveHkiLCJjdXJzb3JJdGVyYXRvclRyYXBzIiwiY2FjaGVkRnVuYyIsIml0ZXJhdGUiLCJjdXJzb3IiLCJvcGVuQ3Vyc29yIiwicHJveGllZEN1cnNvciIsImRlbGV0ZSIsImlzSXRlcmF0b3JQcm9wIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsIk9CSkVDVF9TVE9SRV9OQU1FIiwiZGJQcm9taXNlIiwidmVyc2lvbiIsImJsb2NrZWQiLCJ1cGdyYWRlIiwiYmxvY2tpbmciLCJ0ZXJtaW5hdGVkIiwiaW5kZXhlZERCIiwib3BlblByb21pc2UiLCJldmVudCIsIm9sZFZlcnNpb24iLCJuZXdWZXJzaW9uIiwiZGIiLCJvcGVuREIiLCJjb250YWlucyIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsInByb2R1Y3QiLCJnZXRBbGwiLCJyZW5kZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImFmdGVyUmVuZGVyIiwiZnJvbSIsImNoYXIiLCJzdWJzY3JpYmVVc2VyVG9QdXNoIiwiTm90aWZpY2F0aW9uIiwicGVybWlzc2lvbiIsInJlcXVlc3RQZXJtaXNzaW9uIiwicmVxdWVzdE5vdGlmaWNhdGlvblBlcm1pc3Npb24iLCJrZXlzIiwicDI1NmRoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZ2V0S2V5IiwiYXV0aCIsImljb24iLCJyb3V0ZXMiLCJwcmVzZW50ZXIiLCJtYXJrZXJzIiwiaW5pdE1hcCIsIkwiLCJzZXRWaWV3IiwidGlsZUxheWVyIiwiYXR0cmlidXRpb24iLCJhZGRUbyIsImdldEVsZW1lbnRCeUlkIiwiZGlzcGxheSIsInByb2R1Y3RzIiwiY29udGFpbmVyIiwiY2xlYXJNYXJrZXJzIiwiY2FyZCIsImZvcm1hdHRlZERhdGUiLCJEYXRlIiwiY3JlYXRlZEF0IiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiaXNGYXZvcml0ZWQiLCJnZXRQcm9kdWN0QnlJZCIsInBob3RvVXJsIiwicmVtb3ZlUHJvZHVjdCIsImFsZXJ0IiwicHV0UHJvZHVjdCIsImFkZE1hcmtlciIsImdyb3VwIiwiZmVhdHVyZUdyb3VwIiwiZml0Qm91bmRzIiwiZ2V0Qm91bmRzIiwicGFkZGluZyIsIm1hcmtlciIsImJpbmRQb3B1cCIsImZvckVhY2giLCJtIiwicmVtb3ZlTGF5ZXIiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInBob3RvQmxvYiIsIm1lZGlhU3RyZWFtIiwiaW5pdENhbWVyYUJ1dHRvbnMiLCJpbml0Rm9ybVN1Ym1pc3Npb24iLCJzdG9wQ2FtZXJhU3RyZWFtIiwib24iLCJzZXRMb2NhdGlvbiIsImxhdGxuZyIsImxuZyIsInRvRml4ZWQiLCJjaGVja0Zvcm1WYWxpZGl0eSIsInN0YXJ0Q2FtZXJhQnRuIiwiY2FwdHVyZUJ0biIsInJldGFrZUJ0biIsInZpZGVvRWxlbWVudCIsImNhcHR1cmVkSW1hZ2UiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJ2aWRlbyIsInNyY09iamVjdCIsImRpc2FibGVkIiwiY2FudmFzIiwiY29udGV4dCIsImdldENvbnRleHQiLCJ3aWR0aCIsInZpZGVvV2lkdGgiLCJoZWlnaHQiLCJ2aWRlb0hlaWdodCIsImRyYXdJbWFnZSIsInRvQmxvYiIsImJsb2IiLCJzcmMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJnZXRUcmFja3MiLCJ0cmFjayIsInN0b3AiLCJkZXNjcmlwdGlvbklucHV0IiwicHJldmVudERlZmF1bHQiLCJpc0Zvcm1WYWxpZCIsIm1lc3NhZ2VDb250YWluZXIiLCJmYXZvcml0ZVByb2R1Y3RzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYnV0dG9uIiwiZGF0YXNldCIsImNvbmZpcm0iLCJjbG9zZXN0IiwidHJhbnNpdGlvbiIsIm9wYWNpdHkiLCJjaGlsZHJlbiIsInNob3dOb3RpZmljYXRpb24iLCJ0eXBlIiwiZXhpc3RpbmdOb3RpZiIsIm5vdGlmaWNhdGlvbiIsImNsYXNzTmFtZSIsImxvYWRpbmciLCJidG4iLCJvcmlnaW5hbFRleHQiLCJ1cGRhdGVMYXlvdXQiLCJpc0F1dGhlbnRpY2F0ZWQiLCJoZWFkZXIiLCJmb290ZXIiLCJyb3V0ZXIiLCJzbGljZSIsImlzTG9naW5QYWdlIiwibWFpbkNvbnRlbnQiLCJzdGFydFZpZXdUcmFuc2l0aW9uIiwicGFnZUVsZW1lbnQiLCJ1cGRhdGVBY3RpdmVMaW5rIiwibGluayIsImN1cnJlbnRMaW5rIiwic2V0dXBMb2dvdXRIYW5kbGVyIiwibmF2IiwibG9nb3V0SXRlbSIsImxvZ291dExpbmsiLCJocmVmIiwiaGFtYnVyZ2VyTWVudSIsIm5hdmlnYXRpb25NZW51IiwidG9nZ2xlIiwic2tpcExpbmsiLCJibHVyIiwiZm9jdXMiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIl0sInNvdXJjZVJvb3QiOiIifQ==